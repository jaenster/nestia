{"/docs/core/TypedException":{"title":"Typedexception","data":{"outline#Outline":"export function TypedException<T extends object>(\n  status: number | \"2XX\" | \"3XX\" | \"4XX\" | \"5XX\",\n  description?: string,\n): MethodDecorator;\nException decorator only for swagger documents.TypedException is a decorator function describing HTTP exception and its type which could be occured in a controller method. For reference, this decorator function does not affect to the method's behavior, but affects to the swagger documents generation, or SDK functions when propagation mode being used.","how-to-use#How to use":"import { Controller } from \"@nestjs/common\";\nimport typia, { TypeGuardError } from \"typia\";\nimport {\n  TypedBody,\n  TypedException,\n  TypedParam,\n  TypedRoute,\n} from \"@nestia/core\";\nimport { IBbsArticle } from \"@api/lib/structures/IBbsArticle\";\nimport { IInternalServerError } from \"@api/lib/structures/IInternalServerError\";\nimport { INotFound } from \"@api/lib/structures/INotFound\";\nimport { IUnprocessibleEntity } from \"@api/lib/structures/IUnprocessibleEntity\";\n@Controller(\"exception\")\nexport class ExceptionController {\n  @TypedRoute.Post(\":section/typed\")\n  @TypedException<TypeGuardError>(400, \"invalid request\")\n  @TypedException<INotFound>(404, \"unable to find the matched section\")\n  @TypedException<IUnprocessibleEntity>(428)\n  @TypedException<IInternalServerError>(\"5XX\", \"internal server error\")\n  public async typed(\n    @TypedParam(\"section\") section: string,\n    @TypedBody() input: IBbsArticle.IStore,\n  ): Promise<IBbsArticle> {\n    section;\n    input;\n    return typia.random<IBbsArticle>();\n  }\n}\nJust call TypedException() function with target type and status code.If you want to add description, you can add it as second parameter.For reference, swagger allows to use special pattern like 2XX, 3XX, 4XX, 5XX for status code.","swagger-example#Swagger Example":"Here is an example of swagger documents utilizing the @TypedException() decorator.https://editor.swagger.io/?url=https%3A%2F%2Fraw.githubusercontent.com%2Fsamchon%2Fnestia%2Fmaster%2Ftest%2Ffeatures%2Fexception%2Fswagger.json"}},"/docs/core/TypedParam":{"title":"Typedparam","data":{"outline#Outline":"export function TypedParam(name: string): ParameterDecorator;\nType safe path parameter decorator.@TypedParam() is a decorator parsing path parameter.It's almost same with original @Param() function of NestJS, however, @TypedParam() is more type safe.As @TypedParam() can anlayze source code in the compilation level, it can specify parameter type by itself. Also, while NestJS cannot distinguish nullable type and consider every parameter value as a string type, @TypedParam() can do it. Furthermore, @TypedParam() can validate special types like \"uuid\" or \"date\".Let's read below example code, and see how @TypedParam() works.\n@TypedParam() is not essential for Swagger Documents or SDK Library building.Therefore, it is not a matter to use @TypedParam() or @Param() of the original NestJS.","how-to-use#How to use":"import { TypedParam } from \"@nestia/core\";\nimport { Controller, Get } from \"@nestjs/common\";\nimport { tags } from \"typia\";\n@Controller(\"parameters\")\nexport class ParametersController {\n  @Get(\"uint32/:value\")\n  public async uint32(\n    @TypedParam(\"value\") value: (number & tags.Type<\"uint32\">) | null,\n  ): Promise<(number & tags.Type<\"uint32\">) | null> {\n    return value;\n  }\n  @Get(\"string/:value\")\n  public async string(\n    @TypedParam(\"value\") value: string\n  ): Promise<string> {\n    return value;\n  }\n  @Get(\"uuid/:value\")\n  public async uuid(\n    @TypedParam(\"value\") value: string & tags.Format<\"uuid\">,\n  ): Promise<string> {\n    return value;\n  }\n}\n\"use strict\";\nvar __decorate =\n  (this && this.__decorate) ||\n  function (decorators, target, key, desc) {\n    var c = arguments.length,\n      r =\n        c < 3\n          ? target\n          : desc === null\n          ? (desc = Object.getOwnPropertyDescriptor(target, key))\n          : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if ((d = decorators[i]))\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\nvar __metadata =\n  (this && this.__metadata) ||\n  function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n      return Reflect.metadata(k, v);\n  };\nvar __param =\n  (this && this.__param) ||\n  function (paramIndex, decorator) {\n    return function (target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\nvar __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done\n          ? resolve(result.value)\n          : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ParametersController = void 0;\nconst core_1 = require(\"@nestia/core\");\nconst common_1 = require(\"@nestjs/common\");\nlet ParametersController = class ParametersController {\n  uint32(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return value;\n    });\n  }\n  string(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return value;\n    });\n  }\n  uuid(value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return value;\n    });\n  }\n};\nexports.ParametersController = ParametersController;\n__decorate(\n  [\n    (0, common_1.Get)(\"uint32/:value\"),\n    __param(\n      0,\n      (0, core_1.TypedParam)(\"value\", {\n        name: '((number & Type<\"uint32\">) | null)',\n        is: (input) => {\n          return (\n            null === input ||\n            (\"number\" === typeof input &&\n              Math.floor(input) === input &&\n              0 <= input &&\n              input <= 4294967295)\n          );\n        },\n        cast: (str) => (\"null\" === str ? null : Number(str)),\n      }),\n    ),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Promise),\n  ],\n  ParametersController.prototype,\n  \"uint32\",\n  null,\n);\n__decorate(\n  [\n    (0, common_1.Get)(\"string/:value\"),\n    __param(\n      0,\n      (0, core_1.TypedParam)(\"value\", {\n        name: \"string\",\n        is: (input) => {\n          return \"string\" === typeof input;\n        },\n        cast: (str) => str,\n      }),\n    ),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", Promise),\n  ],\n  ParametersController.prototype,\n  \"string\",\n  null,\n);\n__decorate(\n  [\n    (0, common_1.Get)(\"uuid/:value\"),\n    __param(\n      0,\n      (0, core_1.TypedParam)(\"value\", {\n        name: '(string & Format<\"uuid\">)',\n        is: (input) => {\n          return (\n            \"string\" === typeof input &&\n            /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n              input,\n            )\n          );\n        },\n        cast: (str) => str,\n      }),\n    ),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Promise),\n  ],\n  ParametersController.prototype,\n  \"uuid\",\n  null,\n);\nexports.ParametersController = ParametersController = __decorate(\n  [(0, common_1.Controller)(\"parameters\")],\n  ParametersController,\n);\nJust call @TypedParam() function on the path paremeter, that's all.If you want to special parameter type like \"uint32\" or \"uuid\", utilize type tags of typia.When wrong typed value comes, 400 bad request error would be thrown.","restriction#Restriction":"@TypedParam() allows only atomic type.\nboolean\nnumber\nstring\nbigint\nAlso, @TypedParam() allows nullable like number | null, but undefindable type is not.\nnumber | null is allowed\nstring | undefined is prohibited\nIf you violate above condition, and try to declare object or union type, compilation error would be occured:\nError on nestia.core.TypedParam(): only atomic type is allowed"}},"/docs/editor":{"title":"Editor","data":{"typescript-swagger-editor#TypeScript Swagger Editor":"Supports OpenAPI v3.0 / v3.1\nPut your swagger.json file, then \"TypeScript Swagger Editor\" be opened.\n\"TypeScript Swagger Editor\" is a web-based TypeScript editor (of StackBlitz) for Swagger API specifications, with SDK (Software Development Kit) library generated by @nestia/migrate. With the cloud \"TypeScript Swagger Editor\", you can easily test the backend API with TypeScript code, and it is much convenient than the traditional way of using Swagger UI, due to type checking and auto-completion.Also, \"TypeScript Swagger Editor\" provides Mockup Simulator. With the simulator, you can start the frontend (or client) development even when the backend API is not ready yet. Furthermore, \"TypeScript Swagger Editor\" supports automatic e2e (end-to-end) test functions' generation, so that you can easily validate the API with the generated test code.Here are the some example projects generated by \"TypeScript Swagger Editor\". Traveling those example projects, you may understand how to utilize the \"TypeScript Swagger Editor\". Let's start the type safe API interaction development with \"TypeScript Swagger Editor\"!\nConcepts\nSDK: collection of typed fetch functions with DTO structures\nMockup Simulator: embedded backend simulator in the SDK\nDemo Editors\nBBS (Bullet-in Board System): SDK & Simulator / NestJS Project\nShopping Mall: SDK & Simulator / NestJS Project\nClickhouse: SDK & Simulator / NestJS Project\nFireblocks: SDK & Simulator / NestJS Project\n아임포트: SDK & Simulator / NestJS Project\n토스페이먼츠: SDK & Simulator / NestJS Project","how-to-use-in-local#How to use in local":"npx @nestia/migrate\n? Migration mode (Use arrow keys):\n    NestJS\n  > SDK\n? Swagger file location: assets/input/clickhouse.json\n? Output directory path: assets/output/clickhouse-sdk-manual\n? Mokup Simulator: true\n? E2E Test Functions: true\nRelated document: Nestia > Guide Documents > Migration from Swagger\nRun npx @nestia/migrate command in your terminal. The @nestia/migrate program will inquiry you something. After that, you can generate the SDK library in your local machine, what you've seen in the \"TypeScript Swagger Editor\".For reference, if your backend application utilizes nestia (NestJS), you don't need to build the SDK (Software Development Kit) library by converting from the Swagger Documents. The nestia will automatically generate the much advanced SDK library, just by analyzing your backend application's source code.","roadmap#Roadmap":"Currently, \"TypeScript Swagger Editor\" is utilizing the StackBlitz as the web-based TypeScript editor.However, if many developers agree with the usefulness of the SDK and are interested in \"TypeScript Swagger Editor\", I am planning to develop a new standalone web application called @nestia/editor. It will take advantages of both \"Swagger-UI\" and \"TypeScript Swagger Editor\", and provide more convenient features for the API interaction development.I don't know how popular \"TypeScript Swagger Editor\" would be at this stage, but I hope that I can proceed with the @nestia/editor project as I have created something that front (client) developers desperately need.Let's nestia together."}},"/docs":{"title":"Index","data":{"outline#Outline":"Nestia is a set of helper libraries for NestJS, supporting below features:\n@nestia/core: super-fast decorators\n@nestia/sdk:\nSwagger generator evolved than ever\nSDK library generator for clients\nMockup Simulator for client developers\nAutomatic E2E test functions generator\n@nestia/migrate: migration from Swagger to NestJS\n@nestia/editor: Online TypeScript Swagger Editor\nnestia: just CLI (command line interface) tool\nOnly one line required, with pure TypeScript type\nEnhance performance 30x up\nRuntime validator is 20,000x faster than class-validator\nJSON serialization is 200x faster than class-transformer\nSoftware Development Kit\nCollection of typed fetch functions with DTO structures like tRPC\nMockup simulator means embedded backend simulator in the SDK\nsimilar with msw, but fully automated\nLeft is NestJS server code, and right is client (frontend) code utilizing SDK","sponsors#Sponsors":"Thanks for your support.Your donation would encourage nestia development."}},"/docs/migrate":{"title":"Migration from Swagger","data":{"outline#Outline":"Supports OpenAPI v3.0 / v3.1\nnpx @nestia/migrate\n@nestia/migrate converts swagger.json file to:\nNestJS Project\nStandalone SDK Library\nStandalone Mockup Simulator\nWhen you run npx @nestia/migrate command, @nestia/migrate will analyze your swagger.json file, and generate a NestJS project into the output direcory. If you're considering to migrate your backend project to NestJS, @nestia/migrate will be a good starting point.Of course, even if you're not considering to adapt NestJS, you can generate standalone SDK library and Mockup Simulator from the swagger.json file instead. Just run the npx @nestia/migrate command and build the SDK library and Mockup Simulator, then frontend (client) developers may get satisfied.\nLeft is NestJS server code, and right is client (frontend) code utilizing SDK","arguments#Arguments":"# GRAMMER\nnpx @nestia/migrate \n  --mode [nest|sdk] \n  --input [input] \n  --output [output] \n  --simulate [true|false]\n  --e2e [true|false]\n# EXAMPLES\nnpx @nestia/migrate --mode nest --input swagger.json --output directory --simulate false --e2e false\nnpx @nestia/migrate --mode sdk --input swagger.json --output directory --simulate true --e2e true\nYou can specify migration options like above.However, don't worry anything. If you omit something, prompt inquiries will help you.\nnpx @nestia/migrate\n? Migration mode (Use arrow keys):\n  > NestJS\n    SDK\n? Swagger file location: assets/input/clickhouse.json\n? Output directory path: assets/output/clickhouse-sdk-manual\n? Mokup Simulator: true\n? E2E Test Functions: true","cloud-editor#Cloud Editor":"You can test @nestia/migrate on the web browser.Visit TypeScript Swagger Editor and upload your swagger.json file.Then, you can test the migrated NestJS Project, SDK library and Mockup Simulator in the web browser.\nSupports OpenAPI v3.0 only.\nPut your swagger.json file, then \"TypeScript Swagger Editor\" be opened.\nDemo Editors\nBBS (Bullet-in Board System): NestJS Project / SDK & Simulator\nShopping Mall: NestJS Project / SDK & Simulator\nClickhouse: NestJS Project / SDK & Simulator\nFireblocks: NestJS Project / SDK & Simulator\n아임포트: NestJS Project / SDK & Simulator\n토스페이먼츠: NestJS Project SDK & Simulator"}},"/docs/sdk/sdk":{"title":"Sdk","data":{"":"d:\\github\\samchon\\nestia\\prettier.config.js"}},"/":{"title":"Index","data":{"key-features#Key Features":"","sponsors#Sponsors":"Thanks for your support.Your donation would encourage nestia development."}},"/playground":{"title":"Index","data":{}},"/docs/core/TypedHeaders":{"title":"Typedheaders","data":{"outline#Outline":"export function TypedHeaders(): ParameterDecorator;\nRequest headers decorator, type safe.@TypedHeaders() is a decorator function parsing request headers to a typed object. It validates the request header values through typia.assert<T>(). If the request header values are invalid, it will throw 400 bad request exception.It is almost same with original @Headers() of NestJS, but much type safe.\n@TypedHeaders() is not essential for Swagger Documents or SDK Library building.Therefore, it is not a matter to use @TypedHeaders() or @Headers() of the original NestJS.","how-to-use#How to use":"export interface IHeaders {\n  \"x-category\": \"x\" | \"y\" | \"z\";\n  \"x-memo\"?: string;\n  \"x-name\"?: string;\n  \"x-values\": number[];\n  \"x-flags\": boolean[];\n  \"X-Descriptions\": string[]; // ALLOW UPPER-CASE\n}\nimport { Controller } from \"@nestjs/common\";\nimport core from \"@nestia/core\";\nimport { IHeaders } from \"@api/lib/structures/IHeaders\";\n@Controller(\"headers/:section\")\nexport class HeadersController {\n  /**\n   * Emplace headers.\n   *\n   * @param headers Headers for authentication\n   * @param section Target section code\n   * @returns Store article\n   *\n   * @author Samchon\n   */\n  @core.TypedRoute.Patch()\n  public emplace(\n    @core.TypedHeaders() headers: IHeaders,\n    @core.TypedParam(\"section\", \"string\") section: string,\n  ): void {\n    headers;\n    section;\n  }\n}\n\"use strict\";\nvar __decorate =\n  (this && this.__decorate) ||\n  function (decorators, target, key, desc) {\n    var c = arguments.length,\n      r =\n        c < 3\n          ? target\n          : desc === null\n          ? (desc = Object.getOwnPropertyDescriptor(target, key))\n          : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if ((d = decorators[i]))\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\nvar __metadata =\n  (this && this.__metadata) ||\n  function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n      return Reflect.metadata(k, v);\n  };\nvar __param =\n  (this && this.__param) ||\n  function (paramIndex, decorator) {\n    return function (target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HeadersController = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst core_1 = __importDefault(require(\"@nestia/core\"));\nlet HeadersController = (exports.HeadersController = class HeadersController {\n  /**\n   * Emplace headers.\n   *\n   * @param headers Headers for authentication\n   * @param section Target section code\n   * @returns Store article\n   *\n   * @author Samchon\n   */\n  emplace(headers, section) {\n    headers;\n    section;\n  }\n});\n__decorate(\n  [\n    (0, common_1.Get)(),\n    __param(\n      0,\n      core_1.default.TypedHeaders((input) => {\n        const $number = core_1.default.TypedHeaders.number;\n        const $boolean = core_1.default.TypedHeaders.boolean;\n        const $string = core_1.default.TypedHeaders.string;\n        const output = {\n          \"x-category\": input[\"x-category\"],\n          \"x-memo\": input[\"x-memo\"],\n          \"x-name\": input[\"x-name\"],\n          \"x-values\": input[\"x-values\"]?.split(\", \")?.map($number),\n          \"x-flags\": input[\"x-flags\"]?.split(\", \")?.map($boolean),\n          \"X-Descriptions\": input[\"x-descriptions\"]?.split(\", \")?.map($string),\n          // AUTOMATIC UPPER-CASE CONVERTING\n        };\n        return ((input) => {\n          const __is = (input) => {\n            const $io0 = (input) =>\n              (\"x\" === input[\"x-category\"] ||\n                \"y\" === input[\"x-category\"] ||\n                \"z\" === input[\"x-category\"]) &&\n              (undefined === input[\"x-memo\"] ||\n                \"string\" === typeof input[\"x-memo\"]) &&\n              (undefined === input[\"x-name\"] ||\n                \"string\" === typeof input[\"x-name\"]) &&\n              Array.isArray(input[\"x-values\"]) &&\n              input[\"x-values\"].every(\n                (elem) => \"number\" === typeof elem && Number.isFinite(elem),\n              ) &&\n              Array.isArray(input[\"x-flags\"]) &&\n              input[\"x-flags\"].every((elem) => \"boolean\" === typeof elem) &&\n              Array.isArray(input[\"X-Descriptions\"]) &&\n              input[\"X-Descriptions\"].every((elem) => \"string\" === typeof elem);\n            return \"object\" === typeof input && null !== input && $io0(input);\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.default.TypedHeaders.guard;\n              const $ao0 = (input, _path, _exceptionable = true) =>\n                (\"x\" === input[\"x-category\"] ||\n                  \"y\" === input[\"x-category\"] ||\n                  \"z\" === input[\"x-category\"] ||\n                  $guard(_exceptionable, {\n                    path: _path + '[\"x-category\"]',\n                    expected: '(\"x\" | \"y\" | \"z\")',\n                    value: input[\"x-category\"],\n                  })) &&\n                (undefined === input[\"x-memo\"] ||\n                  \"string\" === typeof input[\"x-memo\"] ||\n                  $guard(_exceptionable, {\n                    path: _path + '[\"x-memo\"]',\n                    expected: \"(string | undefined)\",\n                    value: input[\"x-memo\"],\n                  })) &&\n                (undefined === input[\"x-name\"] ||\n                  \"string\" === typeof input[\"x-name\"] ||\n                  $guard(_exceptionable, {\n                    path: _path + '[\"x-name\"]',\n                    expected: \"(string | undefined)\",\n                    value: input[\"x-name\"],\n                  })) &&\n                (((Array.isArray(input[\"x-values\"]) ||\n                  $guard(_exceptionable, {\n                    path: _path + '[\"x-values\"]',\n                    expected: \"Array<number>\",\n                    value: input[\"x-values\"],\n                  })) &&\n                  input[\"x-values\"].every(\n                    (elem, _index1) =>\n                      (\"number\" === typeof elem && Number.isFinite(elem)) ||\n                      $guard(_exceptionable, {\n                        path: _path + '[\"x-values\"][' + _index1 + \"]\",\n                        expected: \"number\",\n                        value: elem,\n                      }),\n                  )) ||\n                  $guard(_exceptionable, {\n                    path: _path + '[\"x-values\"]',\n                    expected: \"Array<number>\",\n                    value: input[\"x-values\"],\n                  })) &&\n                (((Array.isArray(input[\"x-flags\"]) ||\n                  $guard(_exceptionable, {\n                    path: _path + '[\"x-flags\"]',\n                    expected: \"Array<boolean>\",\n                    value: input[\"x-flags\"],\n                  })) &&\n                  input[\"x-flags\"].every(\n                    (elem, _index2) =>\n                      \"boolean\" === typeof elem ||\n                      $guard(_exceptionable, {\n                        path: _path + '[\"x-flags\"][' + _index2 + \"]\",\n                        expected: \"boolean\",\n                        value: elem,\n                      }),\n                  )) ||\n                  $guard(_exceptionable, {\n                    path: _path + '[\"x-flags\"]',\n                    expected: \"Array<boolean>\",\n                    value: input[\"x-flags\"],\n                  })) &&\n                (((Array.isArray(input[\"X-Descriptions\"]) ||\n                  $guard(_exceptionable, {\n                    path: _path + '[\"X-Descriptions\"]',\n                    expected: \"Array<string>\",\n                    value: input[\"X-Descriptions\"],\n                  })) &&\n                  input[\"X-Descriptions\"].every(\n                    (elem, _index3) =>\n                      \"string\" === typeof elem ||\n                      $guard(_exceptionable, {\n                        path: _path + '[\"X-Descriptions\"][' + _index3 + \"]\",\n                        expected: \"string\",\n                        value: elem,\n                      }),\n                  )) ||\n                  $guard(_exceptionable, {\n                    path: _path + '[\"X-Descriptions\"]',\n                    expected: \"Array<string>\",\n                    value: input[\"X-Descriptions\"],\n                  }));\n              return (\n                (((\"object\" === typeof input && null !== input) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IHeaders\",\n                    value: input,\n                  })) &&\n                  $ao0(input, _path + \"\", true)) ||\n                $guard(true, {\n                  path: _path + \"\",\n                  expected: \"IHeaders\",\n                  value: input,\n                })\n              );\n            })(input, \"$input\", true);\n          return input;\n        })(output);\n      }),\n    ),\n    __param(1, core_1.default.TypedParam(\"section\", \"string\", false)),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object, String]),\n    __metadata(\"design:returntype\", void 0),\n  ],\n  HeadersController.prototype,\n  \"emplace\",\n  null,\n);\nexports.HeadersController = HeadersController = __decorate(\n  [(0, common_1.Controller)(\"headers/:section\")],\n  HeadersController,\n);\nJust call @TypedHeaders() function on the request headers parameter, that's all.Nestia will analyze your type (IHeaders), and write optimal conversion and validation code for the target type, in the compilation level. If you click the \"Compiled JavaScript File\" tab of above, you can see the optimal code.Also, as you can see from the \"Compiled JavaScript File\", when upper case alphabet is used in the header key name like IHeaders[\"X-Descriptions\"], @TypedHeaders() would automatically convert to the upper case alphabet key named property from lower case key named property of raw data.Such optimization is called AOT (Ahead of Time) compilation, and it is the secret of @TypedHeaders\nBesides, the original @Headers() decorator of NestJS does not support such automatic upper case conversion. When you've define upper-cased property name in DTO, undefined value always be assigned, even if you've sent upper-cased property in the client side.","special-tags#Special Tags":"You can enhance validation logic, of @TypedHeaders(), through comment tags.You know what? @TypedHeaders() utilizes typia.assert<T>() function for query data validation, and the typia.assert<T>() function supports additional type checking logics through comment tags. For reference, \"Type Tag\" means a intersection type with atomic type and special tag type of typia like number & tags.Type<\"uint32\">, and \"Comment Tag\" means a comment starting from @ symbol following @${name} ${value} format.With those type and comment tags, you can add additional validation logics. If you want to add a custom validation logic, you also can do it. Read below Guide Docments of typia, and see the example code. You may understand how to utilize such type and comment tags, in a few minutes.\ntypia > Validators > Custom Tags\nOutline\nType Tags\nComment Tags\nCustomization\nimport typia, { tags } from \"typia\";\nexport const checkSpecialTag = typia.createIs<SpecialTag>();\ninterface SpecialTag {\n  int32: number & tags.Type<\"int32\">;\n  range?: number & tags.ExclusiveMinimum<19> & tags.Maximum<100>;\n  minLength: string & tags.MinLength<3>;\n  pattern: string & tags.Pattern<\"^[a-z]+$\">;\n  date: null | (string & tags.Format<\"date\">);\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  uuids: Array<string & tags.Format<\"uuid\">> &\n    tags.MinItems<3> &\n    tags.MaxItems<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkSpecialTag = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst checkSpecialTag = (input) => {\n  const $io0 = (input) =>\n    \"number\" === typeof input.int32 &&\n    Math.floor(input.int32) === input.int32 &&\n    -2147483648 <= input.int32 &&\n    input.int32 <= 2147483647 &&\n    (undefined === input.range ||\n      (\"number\" === typeof input.range &&\n        19 < input.range &&\n        input.range <= 100)) &&\n    \"string\" === typeof input.minLength &&\n    3 <= input.minLength.length &&\n    \"string\" === typeof input.pattern &&\n    /^[a-z]+$/.test(input.pattern) &&\n    (null === input.date ||\n      (\"string\" === typeof input.date &&\n        /^(d{4})-(d{2})-(d{2})$/.test(input.date))) &&\n    \"string\" === typeof input.ip &&\n    (/^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n      input.ip,\n    ) ||\n      /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(\n        input.ip,\n      )) &&\n    Array.isArray(input.uuids) &&\n    3 <= input.uuids.length &&\n    input.uuids.length <= 100 &&\n    input.uuids.every(\n      (elem) =>\n        \"string\" === typeof elem &&\n        /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n          elem,\n        ),\n    );\n  return \"object\" === typeof input && null !== input && $io0(input);\n};\nexports.checkSpecialTag = checkSpecialTag;","restriction#Restriction":"When using @TypedHeaders(), you've to follow such restrictions.At first, type of @TypedHeaders() must be a pure object type. It does not allow union type. Also, nullable types are not allowed, either. Note that, request headers type must be a sole object type without any extra definition. Of course, the word object does not contain array type.At next, type of properties must be atomic, or array of atomic type. In the atomic type case, the atomic type allows both nullable and undefindable types. However, mixed union atomic type like string | number or \"1\" | \"2\" | 3 are not allowed. Also, the array type does not allow both nullable and undefindable types, either.\nboolean\nnumber\nbigint\nstring\nAt last, HTTP headers has special restriction on value types for specific key names. For example, Set-Cookie must be Array type, and Authorization must be an atomic type like string. Therefore, @TypedHeaders() also restricts the value type of specific key names, and it is described in below.\nOnly array type allowed:\nset-cookie\nOnly atomic type allowed:\nage\nauthorization\ncontent-length\ncontent-type\netag\nexpires\nfrom\nhost\nif-modified-since\nif-unmodified-since\nlast-modified\nlocation\nmax-forwards\nproxy-authorization\nreferer\nretry-after\nserver\nuser-agent\nexport interface SomeHeadersDto {\n  //----\n  // ATOMIC TYPES\n  //----\n  // ALLOWED\n  boolean: boolean;\n  number: number;\n  string: string;\n  bigint: bigint;\n  optional_number?: number;\n  nullable_string: string | null;\n  literal_union: \"A\" | \"B\" | \"C\" | \"D\";\n  // NOT ALLOWED\n  mixed_union: string | number | boolean;\n  mixed_literal: \"A\" | \"B\" | 3;\n  //----\n  // ARRAY TYPES\n  //----\n  // ALLOWED\n  nullable_element_array: (string | null)[];\n  string_array: string[];\n  number_array: number[];\n  literal_union_array: (\"A\" | \"B\" | \"C\")[];\n  literal_tuple: [\"A\", \"B\", \"C\"];\n  // NOT ALLOWED\n  optional_element_array: (string | undefined)[];\n  optional_array: string[] | undefined;\n  nullable_array: string[] | null;\n  union_atomic_array: (string | number)[];\n  mixed_literal_array: (\"A\", \"B\", 3)[];\n  mixed_tuple: [\"A\", \"B\", 3];\n  //----\n  // SPECIAL CASES\n  //----\n  // MUST BE ARRAY\n  \"Set-Cookie\": string[];\n  // MUST BE ATOMIC\n  Accept: string;\n  Authorization: string;\n  // NOT ALLOWED - MUST BE ATOMIC\n  referer: string[];\n  age: number[];\n}"}},"/docs/core/TypedQuery":{"title":"Typedquery","data":{"outline#Outline":"export function TypedQuery(): ParameterDecorator;\nexport namespace TypedQuery {\n  export function Body(): ParameterDecorator;\n  export function Get(path?: string): MethodDecorator;\n  export function Post(path?: string): MethodDecorator;\n  export function Put(path?: string): MethodDecorator;\n  export function Patch(path?: string): MethodDecorator;\n  export function Delete(path?: string): MethodDecorator;\n}\nDecorators for query parameters.\nWhat the query parameters are?This is the query parameters!\nname=Samchon&age=20&sex=male\n@TypedQuery() is not essential for Swagger Documents or SDK Library building.Therefore, it is not a matter to use @TypedQuery() or @Query() of the original NestJS.","typedquery#@TypedQuery()":"export function TypedQuery(): ParameterDecorator;\nType safe URL query decorator.@TypedQuery() is a decorator parsing URL query.It's almost same with original @Query() function of NestJS, but @TypedQuery() is more stable and general.While NestJS does not support query type validation, @TypedQuery() validates the request query type and throws 400 bad request error when mismatched. Also, while NestJS does not support property type (@Query() only supports string typed properties), @TypedQuery() can define variable property types like bigint, number or boolean.\nimport { tags } from \"typia\";\nexport namespace IBbsArticle {\n  export interface ISummary {\n    id: string & tags.Format<\"uuid\">;\n    writer: string;\n    title: string & tags.MinLength<3> & tags.MaxLength<50>;\n    created_at: string & tags.Format<\"date-time\">;\n  }\n}\nimport { tags } from \"typia\";\nexport interface IPage<T> {\n  data: T[];\n  pagination: IPage.IPagination;\n}\nexport namespace IPage {\n  /**\n   * Page request data\n   */\n  export interface IRequest {\n    page?: number & tags.Type<\"uint32\">;\n    limit?: number & tags.Type<\"uint32\">;\n  }\n  /**\n   * Page information.\n   */\n  export interface IPagination {\n    current: number & tags.Type<\"uint32\">;\n    limit: number & tags.Type<\"uint32\">;\n    records: number & tags.Type<\"uint32\">;\n    pages: number & tags.Type<\"uint32\">;\n  }\n}\nimport { TypedQuery, TypedRoute } from \"@nestia/core\";\nimport { Controller } from \"@nestjs/common\";\nimport { tags } from \"typia\";\nimport { IBbsArticle } from \"./IBbsArticle\";\nimport { IPage } from \"./IPage\";\n@Controller(\"bbs/articles\")\nexport class BbsArticlesController {\n  @TypedRoute.Get()\n  public async index(\n    @TypedQuery() query: IPage.IRequest\n  ): Promise<IPage<IBbsArticle.ISummary>> {\n    return {\n      pagination: {\n        current: query.page ?? 1,\n        limit: query.limit ?? 100,\n        records: 0,\n        pages: 0,\n      },\n      data: [],\n    };\n  }\n}\n\"use strict\";\nvar __decorate =\n  (this && this.__decorate) ||\n  function (decorators, target, key, desc) {\n    var c = arguments.length,\n      r =\n        c < 3\n          ? target\n          : desc === null\n          ? (desc = Object.getOwnPropertyDescriptor(target, key))\n          : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if ((d = decorators[i]))\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\nvar __metadata =\n  (this && this.__metadata) ||\n  function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n      return Reflect.metadata(k, v);\n  };\nvar __param =\n  (this && this.__param) ||\n  function (paramIndex, decorator) {\n    return function (target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\nvar __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done\n          ? resolve(result.value)\n          : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BbsArticlesController = void 0;\nconst core_1 = require(\"@nestia/core\");\nconst common_1 = require(\"@nestjs/common\");\nlet BbsArticlesController = class BbsArticlesController {\n  index(query) {\n    var _a, _b;\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        pagination: {\n          current: (_a = query.page) !== null && _a !== void 0 ? _a : 1,\n          limit: (_b = query.limit) !== null && _b !== void 0 ? _b : 100,\n          records: 0,\n          pages: 0,\n        },\n        data: [],\n      };\n    });\n  }\n};\nexports.BbsArticlesController = BbsArticlesController;\n__decorate(\n  [\n    core_1.TypedRoute.Get({\n      type: \"assert\",\n      assert: (input) => {\n        const assert = (input) => {\n          const __is = (input) => {\n            const $io0 = (input) =>\n              Array.isArray(input.data) &&\n              input.data.every(\n                (elem) =>\n                  \"object\" === typeof elem && null !== elem && $io1(elem),\n              ) &&\n              \"object\" === typeof input.pagination &&\n              null !== input.pagination &&\n              \"number\" === typeof input.pagination.current &&\n              Math.floor(input.pagination.current) ===\n                input.pagination.current &&\n              0 <= input.pagination.current &&\n              input.pagination.current <= 4294967295 &&\n              \"number\" === typeof input.pagination.limit &&\n              Math.floor(input.pagination.limit) === input.pagination.limit &&\n              0 <= input.pagination.limit &&\n              input.pagination.limit <= 4294967295 &&\n              \"number\" === typeof input.pagination.records &&\n              Math.floor(input.pagination.records) ===\n                input.pagination.records &&\n              0 <= input.pagination.records &&\n              input.pagination.records <= 4294967295 &&\n              \"number\" === typeof input.pagination.pages &&\n              Math.floor(input.pagination.pages) === input.pagination.pages &&\n              0 <= input.pagination.pages &&\n              input.pagination.pages <= 4294967295;\n            const $io1 = (input) =>\n              \"string\" === typeof input.id &&\n              /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n                input.id,\n              ) &&\n              \"string\" === typeof input.writer &&\n              \"string\" === typeof input.title &&\n              3 <= input.title.length &&\n              input.title.length <= 50 &&\n              \"string\" === typeof input.created_at &&\n              !isNaN(new Date(input.created_at).getTime());\n            return \"object\" === typeof input && null !== input && $io0(input);\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.TypedRoute.Get.guard;\n              const $ao0 = (input, _path, _exceptionable = true) =>\n                (((Array.isArray(input.data) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".data\",\n                    expected: \"Array<IBbsArticle.ISummary>\",\n                    value: input.data,\n                  })) &&\n                  input.data.every(\n                    (elem, _index1) =>\n                      (((\"object\" === typeof elem && null !== elem) ||\n                        $guard(_exceptionable, {\n                          path: _path + \".data[\" + _index1 + \"]\",\n                          expected: \"IBbsArticle.ISummary\",\n                          value: elem,\n                        })) &&\n                        $ao1(\n                          elem,\n                          _path + \".data[\" + _index1 + \"]\",\n                          true && _exceptionable,\n                        )) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".data[\" + _index1 + \"]\",\n                        expected: \"IBbsArticle.ISummary\",\n                        value: elem,\n                      }),\n                  )) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".data\",\n                    expected: \"Array<IBbsArticle.ISummary>\",\n                    value: input.data,\n                  })) &&\n                ((((\"object\" === typeof input.pagination &&\n                  null !== input.pagination) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".pagination\",\n                    expected: \"IPage.IPagination\",\n                    value: input.pagination,\n                  })) &&\n                  $ao2(\n                    input.pagination,\n                    _path + \".pagination\",\n                    true && _exceptionable,\n                  )) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".pagination\",\n                    expected: \"IPage.IPagination\",\n                    value: input.pagination,\n                  }));\n              const $ao1 = (input, _path, _exceptionable = true) =>\n                ((\"string\" === typeof input.id &&\n                  (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n                    input.id,\n                  ) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".id\",\n                      expected: 'string & Format<\"uuid\">',\n                      value: input.id,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".id\",\n                    expected: '(string & Format<\"uuid\">)',\n                    value: input.id,\n                  })) &&\n                (\"string\" === typeof input.writer ||\n                  $guard(_exceptionable, {\n                    path: _path + \".writer\",\n                    expected: \"string\",\n                    value: input.writer,\n                  })) &&\n                ((\"string\" === typeof input.title &&\n                  (3 <= input.title.length ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MinLength<3>\",\n                      value: input.title,\n                    })) &&\n                  (input.title.length <= 50 ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MaxLength<50>\",\n                      value: input.title,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".title\",\n                    expected: \"(string & MinLength<3> & MaxLength<50>)\",\n                    value: input.title,\n                  })) &&\n                ((\"string\" === typeof input.created_at &&\n                  (!isNaN(new Date(input.created_at).getTime()) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".created_at\",\n                      expected: 'string & Format<\"date-time\">',\n                      value: input.created_at,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".created_at\",\n                    expected: '(string & Format<\"date-time\">)',\n                    value: input.created_at,\n                  }));\n              const $ao2 = (input, _path, _exceptionable = true) =>\n                ((\"number\" === typeof input.current &&\n                  ((Math.floor(input.current) === input.current &&\n                    0 <= input.current &&\n                    input.current <= 4294967295) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".current\",\n                      expected: 'number & Type<\"uint32\">',\n                      value: input.current,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".current\",\n                    expected: '(number & Type<\"uint32\">)',\n                    value: input.current,\n                  })) &&\n                ((\"number\" === typeof input.limit &&\n                  ((Math.floor(input.limit) === input.limit &&\n                    0 <= input.limit &&\n                    input.limit <= 4294967295) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".limit\",\n                      expected: 'number & Type<\"uint32\">',\n                      value: input.limit,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".limit\",\n                    expected: '(number & Type<\"uint32\">)',\n                    value: input.limit,\n                  })) &&\n                ((\"number\" === typeof input.records &&\n                  ((Math.floor(input.records) === input.records &&\n                    0 <= input.records &&\n                    input.records <= 4294967295) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".records\",\n                      expected: 'number & Type<\"uint32\">',\n                      value: input.records,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".records\",\n                    expected: '(number & Type<\"uint32\">)',\n                    value: input.records,\n                  })) &&\n                ((\"number\" === typeof input.pages &&\n                  ((Math.floor(input.pages) === input.pages &&\n                    0 <= input.pages &&\n                    input.pages <= 4294967295) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".pages\",\n                      expected: 'number & Type<\"uint32\">',\n                      value: input.pages,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".pages\",\n                    expected: '(number & Type<\"uint32\">)',\n                    value: input.pages,\n                  }));\n              return (\n                (((\"object\" === typeof input && null !== input) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IPage<IBbsArticle.ISummary>\",\n                    value: input,\n                  })) &&\n                  $ao0(input, _path + \"\", true)) ||\n                $guard(true, {\n                  path: _path + \"\",\n                  expected: \"IPage<IBbsArticle.ISummary>\",\n                  value: input,\n                })\n              );\n            })(input, \"$input\", true);\n          return input;\n        };\n        const stringify = (input) => {\n          const $io1 = (input) =>\n            \"string\" === typeof input.id &&\n            /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n              input.id,\n            ) &&\n            \"string\" === typeof input.writer &&\n            \"string\" === typeof input.title &&\n            3 <= input.title.length &&\n            input.title.length <= 50 &&\n            \"string\" === typeof input.created_at &&\n            !isNaN(new Date(input.created_at).getTime());\n          const $io2 = (input) =>\n            \"number\" === typeof input.current &&\n            Math.floor(input.current) === input.current &&\n            0 <= input.current &&\n            input.current <= 4294967295 &&\n            \"number\" === typeof input.limit &&\n            Math.floor(input.limit) === input.limit &&\n            0 <= input.limit &&\n            input.limit <= 4294967295 &&\n            \"number\" === typeof input.records &&\n            Math.floor(input.records) === input.records &&\n            0 <= input.records &&\n            input.records <= 4294967295 &&\n            \"number\" === typeof input.pages &&\n            Math.floor(input.pages) === input.pages &&\n            0 <= input.pages &&\n            input.pages <= 4294967295;\n          const $string = core_1.TypedRoute.Get.string;\n          const $so0 = (input) =>\n            `{\"data\":${`[${input.data\n              .map(\n                (elem) =>\n                  `{\"id\":${$string(elem.id)},\"writer\":${$string(\n                    elem.writer,\n                  )},\"title\":${$string(elem.title)},\"created_at\":${$string(\n                    elem.created_at,\n                  )}}`,\n              )\n              .join(\n                \",\",\n              )}]`},\"pagination\":${`{\"current\":${input.pagination.current},\"limit\":${input.pagination.limit},\"records\":${input.pagination.records},\"pages\":${input.pagination.pages}}`}}`;\n          return $so0(input);\n        };\n        return stringify(assert(input));\n      },\n    }),\n    __param(\n      0,\n      (0, core_1.TypedQuery)((input) => {\n        var _a, _b;\n        const $number = core_1.TypedQuery.number;\n        const output = {\n          page:\n            (_a = $number(input.get(\"page\"))) !== null && _a !== void 0\n              ? _a\n              : undefined,\n          limit:\n            (_b = $number(input.get(\"limit\"))) !== null && _b !== void 0\n              ? _b\n              : undefined,\n        };\n        return ((input) => {\n          const __is = (input) => {\n            const $io0 = (input) =>\n              (undefined === input.page ||\n                (\"number\" === typeof input.page &&\n                  Math.floor(input.page) === input.page &&\n                  0 <= input.page &&\n                  input.page <= 4294967295)) &&\n              (undefined === input.limit ||\n                (\"number\" === typeof input.limit &&\n                  Math.floor(input.limit) === input.limit &&\n                  0 <= input.limit &&\n                  input.limit <= 4294967295));\n            return (\n              \"object\" === typeof input &&\n              null !== input &&\n              false === Array.isArray(input) &&\n              $io0(input)\n            );\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.TypedQuery.guard;\n              const $ao0 = (input, _path, _exceptionable = true) =>\n                (undefined === input.page ||\n                  (\"number\" === typeof input.page &&\n                    ((Math.floor(input.page) === input.page &&\n                      0 <= input.page &&\n                      input.page <= 4294967295) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".page\",\n                        expected: 'number & Type<\"uint32\">',\n                        value: input.page,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".page\",\n                    expected: '((number & Type<\"uint32\">) | undefined)',\n                    value: input.page,\n                  })) &&\n                (undefined === input.limit ||\n                  (\"number\" === typeof input.limit &&\n                    ((Math.floor(input.limit) === input.limit &&\n                      0 <= input.limit &&\n                      input.limit <= 4294967295) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".limit\",\n                        expected: 'number & Type<\"uint32\">',\n                        value: input.limit,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".limit\",\n                    expected: '((number & Type<\"uint32\">) | undefined)',\n                    value: input.limit,\n                  }));\n              return (\n                (((\"object\" === typeof input &&\n                  null !== input &&\n                  false === Array.isArray(input)) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IPage.IRequest\",\n                    value: input,\n                  })) &&\n                  $ao0(input, _path + \"\", true)) ||\n                $guard(true, {\n                  path: _path + \"\",\n                  expected: \"IPage.IRequest\",\n                  value: input,\n                })\n              );\n            })(input, \"$input\", true);\n          return input;\n        })(output);\n      }),\n    ),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Promise),\n  ],\n  BbsArticlesController.prototype,\n  \"index\",\n  null,\n);\nexports.BbsArticlesController = BbsArticlesController = __decorate(\n  [(0, common_1.Controller)(\"bbs/articles\")],\n  BbsArticlesController,\n);\nJust call @TypedQuery() function on the query parameter, that's all.Nestia will analyze your type (IPage.IRequest), and writes optimal code for the target type, in the compilation level. If you click the \"Compiled JavaScript\" file tab of above and fine enhanced lines by blue lines, you can see the optimal parsing and validation code.Such optimization is called AOT (Ahead of Time) compilation, and it is the secret of @TypedQuery.","typedquerybody#TypedQuery.Body()":"export namespace TypedQuery {\n  export function Body(): ParameterDecorator;\n}\nRequest body decorator of application/x-www-form-urlencoded format.If you call @TypedQuery.Body() decorator function on a specific parameter, the parameter will be parsed from the request body as application/x-www-form-urlencoded format. Otherwise, you want to declare a application/json format response body, use @TypedBody() decorator function instead.\nimport { tags } from \"typia\";\nexport interface IBbsArticle {\n  id: string;\n  writer: string;\n  title: string & tags.MinLength<3> & tags.MaxLength<50>;\n  body: string;\n  created_at: string & tags.Format<\"date-time\">;\n}\nexport namespace IBbsArticle {\n  export interface IStore {\n    title: string & tags.MinLength<3> & tags.MaxLength<50>;\n    body: string;\n  }\n}\nimport { TypedQuery } from \"@nestia/core\";\nimport { Controller } from \"@nestjs/common\";\nimport { IBbsArticle } from \"@api/lib/structures/IBbsArticle\";\n@Controller(\"bbs/articles\")\nexport class BbsArticlesController {\n  @TypedQuery.Post()\n  public async store(\n    @TypedQuery.Body() body: IBbsArticle.IStore,\n  ): Promise<IBbsArticle> {\n    return {\n      id: \"00000000-0000-0000-0000-000000000000\",\n      writer: \"Samchon\",\n      title: body.title,\n      body: body.body,\n      created_at: new Date().toISOString(),\n    };\n  }\n}\n\"use strict\";\nvar __decorate =\n  (this && this.__decorate) ||\n  function (decorators, target, key, desc) {\n    var c = arguments.length,\n      r =\n        c < 3\n          ? target\n          : desc === null\n          ? (desc = Object.getOwnPropertyDescriptor(target, key))\n          : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if ((d = decorators[i]))\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\nvar __metadata =\n  (this && this.__metadata) ||\n  function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n      return Reflect.metadata(k, v);\n  };\nvar __param =\n  (this && this.__param) ||\n  function (paramIndex, decorator) {\n    return function (target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\nvar __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done\n          ? resolve(result.value)\n          : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BbsArticlesController = void 0;\nconst core_1 = require(\"@nestia/core\");\nconst common_1 = require(\"@nestjs/common\");\nlet BbsArticlesController = class BbsArticlesController {\n  store(body) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        id: \"00000000-0000-0000-0000-000000000000\",\n        writer: \"Samchon\",\n        title: body.title,\n        body: body.body,\n        created_at: new Date().toISOString(),\n      };\n    });\n  }\n};\nexports.BbsArticlesController = BbsArticlesController;\n__decorate(\n  [\n    core_1.TypedQuery.Post({\n      type: \"assert\",\n      assert: (input) => {\n        const assert = (input) => {\n          const __is = (input) => {\n            return (\n              \"object\" === typeof input &&\n              null !== input &&\n              \"string\" === typeof input.id &&\n              \"string\" === typeof input.writer &&\n              \"string\" === typeof input.title &&\n              3 <= input.title.length &&\n              input.title.length <= 50 &&\n              \"string\" === typeof input.body &&\n              \"string\" === typeof input.created_at &&\n              !isNaN(new Date(input.created_at).getTime())\n            );\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.TypedQuery.Post.guard;\n              const $ao0 = (input, _path, _exceptionable = true) =>\n                (\"string\" === typeof input.id ||\n                  $guard(_exceptionable, {\n                    path: _path + \".id\",\n                    expected: \"string\",\n                    value: input.id,\n                  })) &&\n                (\"string\" === typeof input.writer ||\n                  $guard(_exceptionable, {\n                    path: _path + \".writer\",\n                    expected: \"string\",\n                    value: input.writer,\n                  })) &&\n                ((\"string\" === typeof input.title &&\n                  (3 <= input.title.length ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MinLength<3>\",\n                      value: input.title,\n                    })) &&\n                  (input.title.length <= 50 ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MaxLength<50>\",\n                      value: input.title,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".title\",\n                    expected: \"(string & MinLength<3> & MaxLength<50>)\",\n                    value: input.title,\n                  })) &&\n                (\"string\" === typeof input.body ||\n                  $guard(_exceptionable, {\n                    path: _path + \".body\",\n                    expected: \"string\",\n                    value: input.body,\n                  })) &&\n                ((\"string\" === typeof input.created_at &&\n                  (!isNaN(new Date(input.created_at).getTime()) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".created_at\",\n                      expected: 'string & Format<\"date-time\">',\n                      value: input.created_at,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".created_at\",\n                    expected: '(string & Format<\"date-time\">)',\n                    value: input.created_at,\n                  }));\n              return (\n                (((\"object\" === typeof input && null !== input) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IBbsArticle\",\n                    value: input,\n                  })) &&\n                  $ao0(input, _path + \"\", true)) ||\n                $guard(true, {\n                  path: _path + \"\",\n                  expected: \"IBbsArticle\",\n                  value: input,\n                })\n              );\n            })(input, \"$input\", true);\n          return input;\n        };\n        const stringify = (input) => {\n          const output = new URLSearchParams();\n          output.append(\"id\", input.id);\n          output.append(\"writer\", input.writer);\n          output.append(\"title\", input.title);\n          output.append(\"body\", input.body);\n          output.append(\"created_at\", input.created_at);\n          return output;\n        };\n        return stringify(assert(input));\n      },\n    }),\n    __param(\n      0,\n      core_1.TypedQuery.Body({\n        type: \"assert\",\n        assert: (input) => {\n          const decode = (input) => {\n            const $params = core_1.TypedQuery.Body.params;\n            const $string = core_1.TypedQuery.Body.string;\n            input = $params(input);\n            const output = {\n              title: $string(input.get(\"title\")),\n              body: $string(input.get(\"body\")),\n            };\n            return output;\n          };\n          const assert = (input) => {\n            const __is = (input) => {\n              return (\n                \"object\" === typeof input &&\n                null !== input &&\n                \"string\" === typeof input.title &&\n                3 <= input.title.length &&\n                input.title.length <= 50 &&\n                \"string\" === typeof input.body\n              );\n            };\n            if (false === __is(input))\n              ((input, _path, _exceptionable = true) => {\n                const $guard = core_1.TypedQuery.Body.guard;\n                const $ao0 = (input, _path, _exceptionable = true) =>\n                  ((\"string\" === typeof input.title &&\n                    (3 <= input.title.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".title\",\n                        expected: \"string & MinLength<3>\",\n                        value: input.title,\n                      })) &&\n                    (input.title.length <= 50 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".title\",\n                        expected: \"string & MaxLength<50>\",\n                        value: input.title,\n                      }))) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"(string & MinLength<3> & MaxLength<50>)\",\n                      value: input.title,\n                    })) &&\n                  (\"string\" === typeof input.body ||\n                    $guard(_exceptionable, {\n                      path: _path + \".body\",\n                      expected: \"string\",\n                      value: input.body,\n                    }));\n                return (\n                  (((\"object\" === typeof input && null !== input) ||\n                    $guard(true, {\n                      path: _path + \"\",\n                      expected: \"IBbsArticle.IStore\",\n                      value: input,\n                    })) &&\n                    $ao0(input, _path + \"\", true)) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IBbsArticle.IStore\",\n                    value: input,\n                  })\n                );\n              })(input, \"$input\", true);\n            return input;\n          };\n          const output = decode(input);\n          return assert(output);\n        },\n      }),\n    ),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Promise),\n  ],\n  BbsArticlesController.prototype,\n  \"store\",\n  null,\n);\nexports.BbsArticlesController = BbsArticlesController = __decorate(\n  [(0, common_1.Controller)(\"bbs/articles\")],\n  BbsArticlesController,\n);","typedquerypost#TypedQuery.Post()":"export namespace TypedQuery {\n  export function Get(path?: string): MethodDecorator;\n  export function Post(path?: string): MethodDecorator;\n  export function Put(path?: string): MethodDecorator;\n  export function Patch(path?: string): MethodDecorator;\n  export function Delete(path?: string): MethodDecorator;\n}\nRoute decorators of application/x-www-form-urlencoded format response body.If you call one of below decorator functions on a method, the method will return application/x-www-form-urlencoded format response body. Otherwise, you want to declare a application/json format response body, use @TypedRoute.Post() decorator function instead.\n@TypedQuery.Get()\n@TypedQuery.Post()\n@TypedQuery.Put()\n@TypedQuery.Patch()\n@TypedQuery.Delete()\nimport { tags } from \"typia\";\nexport interface IBbsArticle {\n  id: string;\n  writer: string;\n  title: string & tags.MinLength<3> & tags.MaxLength<50>;\n  body: string;\n  created_at: string & tags.Format<\"date-time\">;\n}\nexport namespace IBbsArticle {\n  export interface IStore {\n    title: string & tags.MinLength<3> & tags.MaxLength<50>;\n    body: string;\n  }\n}\nimport { TypedQuery } from \"@nestia/core\";\nimport { Controller } from \"@nestjs/common\";\nimport { IBbsArticle } from \"@api/lib/structures/IBbsArticle\";\n@Controller(\"bbs/articles\")\nexport class BbsArticlesController {\n  @TypedQuery.Post()\n  public async store(\n    @TypedQuery.Body() body: IBbsArticle.IStore,\n  ): Promise<IBbsArticle> {\n    return {\n      id: \"00000000-0000-0000-0000-000000000000\",\n      writer: \"Samchon\",\n      title: body.title,\n      body: body.body,\n      created_at: new Date().toISOString(),\n    };\n  }\n}\n\"use strict\";\nvar __decorate =\n  (this && this.__decorate) ||\n  function (decorators, target, key, desc) {\n    var c = arguments.length,\n      r =\n        c < 3\n          ? target\n          : desc === null\n          ? (desc = Object.getOwnPropertyDescriptor(target, key))\n          : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if ((d = decorators[i]))\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\nvar __metadata =\n  (this && this.__metadata) ||\n  function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n      return Reflect.metadata(k, v);\n  };\nvar __param =\n  (this && this.__param) ||\n  function (paramIndex, decorator) {\n    return function (target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\nvar __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done\n          ? resolve(result.value)\n          : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BbsArticlesController = void 0;\nconst core_1 = require(\"@nestia/core\");\nconst common_1 = require(\"@nestjs/common\");\nlet BbsArticlesController = class BbsArticlesController {\n  store(body) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        id: \"00000000-0000-0000-0000-000000000000\",\n        writer: \"Samchon\",\n        title: body.title,\n        body: body.body,\n        created_at: new Date().toISOString(),\n      };\n    });\n  }\n};\nexports.BbsArticlesController = BbsArticlesController;\n__decorate(\n  [\n    core_1.TypedQuery.Post({\n      type: \"assert\",\n      assert: (input) => {\n        const assert = (input) => {\n          const __is = (input) => {\n            return (\n              \"object\" === typeof input &&\n              null !== input &&\n              \"string\" === typeof input.id &&\n              \"string\" === typeof input.writer &&\n              \"string\" === typeof input.title &&\n              3 <= input.title.length &&\n              input.title.length <= 50 &&\n              \"string\" === typeof input.body &&\n              \"string\" === typeof input.created_at &&\n              !isNaN(new Date(input.created_at).getTime())\n            );\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.TypedQuery.Post.guard;\n              const $ao0 = (input, _path, _exceptionable = true) =>\n                (\"string\" === typeof input.id ||\n                  $guard(_exceptionable, {\n                    path: _path + \".id\",\n                    expected: \"string\",\n                    value: input.id,\n                  })) &&\n                (\"string\" === typeof input.writer ||\n                  $guard(_exceptionable, {\n                    path: _path + \".writer\",\n                    expected: \"string\",\n                    value: input.writer,\n                  })) &&\n                ((\"string\" === typeof input.title &&\n                  (3 <= input.title.length ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MinLength<3>\",\n                      value: input.title,\n                    })) &&\n                  (input.title.length <= 50 ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MaxLength<50>\",\n                      value: input.title,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".title\",\n                    expected: \"(string & MinLength<3> & MaxLength<50>)\",\n                    value: input.title,\n                  })) &&\n                (\"string\" === typeof input.body ||\n                  $guard(_exceptionable, {\n                    path: _path + \".body\",\n                    expected: \"string\",\n                    value: input.body,\n                  })) &&\n                ((\"string\" === typeof input.created_at &&\n                  (!isNaN(new Date(input.created_at).getTime()) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".created_at\",\n                      expected: 'string & Format<\"date-time\">',\n                      value: input.created_at,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".created_at\",\n                    expected: '(string & Format<\"date-time\">)',\n                    value: input.created_at,\n                  }));\n              return (\n                (((\"object\" === typeof input && null !== input) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IBbsArticle\",\n                    value: input,\n                  })) &&\n                  $ao0(input, _path + \"\", true)) ||\n                $guard(true, {\n                  path: _path + \"\",\n                  expected: \"IBbsArticle\",\n                  value: input,\n                })\n              );\n            })(input, \"$input\", true);\n          return input;\n        };\n        const stringify = (input) => {\n          const output = new URLSearchParams();\n          output.append(\"id\", input.id);\n          output.append(\"writer\", input.writer);\n          output.append(\"title\", input.title);\n          output.append(\"body\", input.body);\n          output.append(\"created_at\", input.created_at);\n          return output;\n        };\n        return stringify(assert(input));\n      },\n    }),\n    __param(\n      0,\n      core_1.TypedQuery.Body({\n        type: \"assert\",\n        assert: (input) => {\n          const decode = (input) => {\n            const $params = core_1.TypedQuery.Body.params;\n            const $string = core_1.TypedQuery.Body.string;\n            input = $params(input);\n            const output = {\n              title: $string(input.get(\"title\")),\n              body: $string(input.get(\"body\")),\n            };\n            return output;\n          };\n          const assert = (input) => {\n            const __is = (input) => {\n              return (\n                \"object\" === typeof input &&\n                null !== input &&\n                \"string\" === typeof input.title &&\n                3 <= input.title.length &&\n                input.title.length <= 50 &&\n                \"string\" === typeof input.body\n              );\n            };\n            if (false === __is(input))\n              ((input, _path, _exceptionable = true) => {\n                const $guard = core_1.TypedQuery.Body.guard;\n                const $ao0 = (input, _path, _exceptionable = true) =>\n                  ((\"string\" === typeof input.title &&\n                    (3 <= input.title.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".title\",\n                        expected: \"string & MinLength<3>\",\n                        value: input.title,\n                      })) &&\n                    (input.title.length <= 50 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".title\",\n                        expected: \"string & MaxLength<50>\",\n                        value: input.title,\n                      }))) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"(string & MinLength<3> & MaxLength<50>)\",\n                      value: input.title,\n                    })) &&\n                  (\"string\" === typeof input.body ||\n                    $guard(_exceptionable, {\n                      path: _path + \".body\",\n                      expected: \"string\",\n                      value: input.body,\n                    }));\n                return (\n                  (((\"object\" === typeof input && null !== input) ||\n                    $guard(true, {\n                      path: _path + \"\",\n                      expected: \"IBbsArticle.IStore\",\n                      value: input,\n                    })) &&\n                    $ao0(input, _path + \"\", true)) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IBbsArticle.IStore\",\n                    value: input,\n                  })\n                );\n              })(input, \"$input\", true);\n            return input;\n          };\n          const output = decode(input);\n          return assert(output);\n        },\n      }),\n    ),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Promise),\n  ],\n  BbsArticlesController.prototype,\n  \"store\",\n  null,\n);\nexports.BbsArticlesController = BbsArticlesController = __decorate(\n  [(0, common_1.Controller)(\"bbs/articles\")],\n  BbsArticlesController,\n);","special-tags#Special Tags":"You can enhance validation logic, of @TypedQuery(), through comment tags.You know what? @TypedQuery() utilizes typia.assert<T>() function for query data validation, and the typia.assert<T>() function supports additional type checking logics through comment tags. For reference, \"Type Tag\" means a intersection type with atomic type and special tag type of typia like number & tags.Type<\"uint32\">, and \"Comment Tag\" means a comment starting from @ symbol following @${name} ${value} format.With those type and comment tags, you can add additional validation logics. If you want to add a custom validation logic, you also can do it. Read below Guide Docments of typia, and see the example code. You may understand how to utilize such type and comment tags, in a few minutes.\ntypia > Validators > Custom Tags\nOutline\nType Tags\nComment Tags\nCustomization\nimport typia, { tags } from \"typia\";\nexport const checkSpecialTag = typia.createIs<SpecialTag>();\ninterface SpecialTag {\n  int32: number & tags.Type<\"int32\">;\n  range?: number & tags.ExclusiveMinimum<19> & tags.Maximum<100>;\n  minLength: string & tags.MinLength<3>;\n  pattern: string & tags.Pattern<\"^[a-z]+$\">;\n  date: null | (string & tags.Format<\"date\">);\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  uuids: Array<string & tags.Format<\"uuid\">> &\n    tags.MinItems<3> &\n    tags.MaxItems<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkSpecialTag = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst checkSpecialTag = (input) => {\n  const $io0 = (input) =>\n    \"number\" === typeof input.int32 &&\n    Math.floor(input.int32) === input.int32 &&\n    -2147483648 <= input.int32 &&\n    input.int32 <= 2147483647 &&\n    (undefined === input.range ||\n      (\"number\" === typeof input.range &&\n        19 < input.range &&\n        input.range <= 100)) &&\n    \"string\" === typeof input.minLength &&\n    3 <= input.minLength.length &&\n    \"string\" === typeof input.pattern &&\n    /^[a-z]+$/.test(input.pattern) &&\n    (null === input.date ||\n      (\"string\" === typeof input.date &&\n        /^(d{4})-(d{2})-(d{2})$/.test(input.date))) &&\n    \"string\" === typeof input.ip &&\n    (/^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n      input.ip,\n    ) ||\n      /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(\n        input.ip,\n      )) &&\n    Array.isArray(input.uuids) &&\n    3 <= input.uuids.length &&\n    input.uuids.length <= 100 &&\n    input.uuids.every(\n      (elem) =>\n        \"string\" === typeof elem &&\n        /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n          elem,\n        ),\n    );\n  return \"object\" === typeof input && null !== input && $io0(input);\n};\nexports.checkSpecialTag = checkSpecialTag;","restriction#Restriction":"When using @TypedQuery(), you've to follow such restrction.At first, type of @TypedQuery() must be a pure object type. It does not allow union type. Also, nullable and undefindable types are not allowed, either. Note that, query parameter type must be a sole object type without any extra definition.At next, type of properties must be atomic, or array of atomic type. In the atomic type case, the atomic type allows both nullable and undefindable types. However, mixed union atomic type like string | number or \"1\" | \"2\" | 3 are not allowed. Also, the array type does not allow both nullable and undefindable types, either.\nboolean\nnumber\nbigint\nstring\nexport interface SomeQueryDto {\n  //----\n  // ATOMIC TYPES\n  //----\n  // ALLOWED\n  boolean: boolean;\n  number: number;\n  string: string;\n  bigint: bigint;\n  optional_number?: number;\n  nullable_string: string | null;\n  literal_union: \"A\" | \"B\" | \"C\" | \"D\";\n  // NOT ALLOWED\n  mixed_union: string | number | boolean;\n  mixed_literal: \"A\" | \"B\" | 3;\n  //----\n  // ARRAY TYPES\n  //----\n  // ALLOWED\n  nullable_element_array: (string | null)[];\n  string_array: string[];\n  number_array: number[];\n  literal_union_array: (\"A\" | \"B\" | \"C\")[];\n  literal_tuple: [\"A\", \"B\", \"C\"];\n  // NOT ALLOWED\n  optional_element_array: (string | undefined)[];\n  optional_array: string[] | undefined;\n  nullable_array: string[] | null;\n  union_atomic_array: (string | number)[];\n  mixed_literal_array: (\"A\", \"B\", 3)[];\n  mixed_tuple: [\"A\", \"B\", 3];\n}"}},"/docs/core/TypedRoute":{"title":"Typedroute","data":{"outline#Outline":"export namespace TypedRoute {\n  export function Get(path?: string): MethodDecorator;\n  export function Post(path?: string): MethodDecorator;\n  export function Put(path?: string): MethodDecorator;\n  export function Patch(path?: string): MethodDecorator;\n  export function Delete(path?: string): MethodDecorator;\n}\nRoute decorators 200x faster, even type safe and easy to use.TypedRoute is a namespaced module containing router decorators utilizing typia.assertStringify<T>() function. Those decorators are almost same with original NestJS, but TypedRoute can boost up JSON serialization speed maximum 200x times faster than class-transformer, therefore much faster than original NestJS.Furthermore, as TypedRoute utilizes typia.assertStringify<T>() function, it is even type safe. The typia.assertStringify<T>() function validates response data type, via typia.assert<T>() function, before JSON serialization. Therefore, if you try to return wrong typed value, it would be blocked with 500 internal server error.Moreover, TypedRoute is much easier than class-transformer, because it just needs only pure TypeScript type definition. If you can't understand the word \"pure TypeScript type\", then move to below #How to use section and read the IBbsArticle interface type. You may understand what it means.\nIf you want application/x-www-form-urlencoded type, use @TypedQuery.Post() instead.\n@TypedRoute.Get() is not essential for Swagger Documents or SDK Library building.Therefore, it is not a matter to use @TypedRoute.Post() or @Post() of the original NestJS.","how-to-use#How to use":"import { tags } from \"typia\";\nexport interface IBbsArticle extends IBbsArticle.IStore {\n  id: string & tags.Format<\"uuid\">;\n  created_at: string & tags.Format<\"date-time\">;\n}\nexport namespace IBbsArticle {\n  export interface IStore {\n    title: string & tags.MinLength<3> & tags.MaxLength<50>;\n    body: string;\n    files: IAttachmentFile[];\n  }\n}\nexport interface IAttachmentFile {\n  name: null | (string & tags.MinLength<1> & tags.MaxLength<255>);\n  extension: null | (string & tags.MinLength<1> & tags.MaxLength<8>);\n  url: string & tags.Format<\"url\">;\n}\nimport { TypedRoute } from \"@nestia/core\";\nimport { Controller } from \"@nestjs/common\";\nimport { IBbsArticle } from \"./IBbsArticle\";\n@Controller(\"bbs/articles\")\nexport class BbsArticlesController {\n  /**\n   * Get random article for testing.\n   */\n  @TypedRoute.Get(\"random\")\n  public async random(): Promise<IBbsArticle> {\n    return {\n      id: \"2b5e21d8-0e44-4482-bd3e-4540dee7f3d6\",\n      title: \"Hello nestia users\",\n      body: \"Just use `TypedRoute.Get()` function like this\",\n      created_at: \"2023-04-23T12:04:54.168Z\",\n      files: [],\n    };\n  }\n}\n\"use strict\";\nvar __decorate =\n  (this && this.__decorate) ||\n  function (decorators, target, key, desc) {\n    var c = arguments.length,\n      r =\n        c < 3\n          ? target\n          : desc === null\n          ? (desc = Object.getOwnPropertyDescriptor(target, key))\n          : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if ((d = decorators[i]))\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\nvar __metadata =\n  (this && this.__metadata) ||\n  function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n      return Reflect.metadata(k, v);\n  };\nvar __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done\n          ? resolve(result.value)\n          : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BbsArticlesController = void 0;\nconst core_1 = require(\"@nestia/core\");\nconst common_1 = require(\"@nestjs/common\");\nlet BbsArticlesController = class BbsArticlesController {\n  /**\n   * Get random article for testing.\n   */\n  random() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return {\n        id: \"2b5e21d8-0e44-4482-bd3e-4540dee7f3d6\",\n        title: \"Hello nestia users\",\n        body: \"Just use `TypedRoute.Get()` function like this\",\n        created_at: \"2023-04-23T12:04:54.168Z\",\n        files: [],\n      };\n    });\n  }\n};\nexports.BbsArticlesController = BbsArticlesController;\n__decorate(\n  [\n    core_1.TypedRoute.Get(\"random\", {\n      type: \"assert\",\n      assert: (input) => {\n        const assert = (input) => {\n          const __is = (input) => {\n            const $io0 = (input) =>\n              \"string\" === typeof input.id &&\n              /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n                input.id,\n              ) &&\n              \"string\" === typeof input.created_at &&\n              !isNaN(new Date(input.created_at).getTime()) &&\n              \"string\" === typeof input.title &&\n              3 <= input.title.length &&\n              input.title.length <= 50 &&\n              \"string\" === typeof input.body &&\n              Array.isArray(input.files) &&\n              input.files.every(\n                (elem) =>\n                  \"object\" === typeof elem && null !== elem && $io1(elem),\n              );\n            const $io1 = (input) =>\n              (null === input.name ||\n                (\"string\" === typeof input.name &&\n                  1 <= input.name.length &&\n                  input.name.length <= 255)) &&\n              (null === input.extension ||\n                (\"string\" === typeof input.extension &&\n                  1 <= input.extension.length &&\n                  input.extension.length <= 8)) &&\n              \"string\" === typeof input.url &&\n              /^[a-zA-Z0-9]+:\\/\\/(?:www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_+.~#?&/=]*)$/.test(\n                input.url,\n              );\n            return \"object\" === typeof input && null !== input && $io0(input);\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.TypedRoute.Get.guard;\n              const $ao0 = (input, _path, _exceptionable = true) =>\n                ((\"string\" === typeof input.id &&\n                  (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n                    input.id,\n                  ) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".id\",\n                      expected: 'string & Format<\"uuid\">',\n                      value: input.id,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".id\",\n                    expected: '(string & Format<\"uuid\">)',\n                    value: input.id,\n                  })) &&\n                ((\"string\" === typeof input.created_at &&\n                  (!isNaN(new Date(input.created_at).getTime()) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".created_at\",\n                      expected: 'string & Format<\"date-time\">',\n                      value: input.created_at,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".created_at\",\n                    expected: '(string & Format<\"date-time\">)',\n                    value: input.created_at,\n                  })) &&\n                ((\"string\" === typeof input.title &&\n                  (3 <= input.title.length ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MinLength<3>\",\n                      value: input.title,\n                    })) &&\n                  (input.title.length <= 50 ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MaxLength<50>\",\n                      value: input.title,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".title\",\n                    expected: \"(string & MinLength<3> & MaxLength<50>)\",\n                    value: input.title,\n                  })) &&\n                (\"string\" === typeof input.body ||\n                  $guard(_exceptionable, {\n                    path: _path + \".body\",\n                    expected: \"string\",\n                    value: input.body,\n                  })) &&\n                (((Array.isArray(input.files) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files\",\n                    expected: \"Array<IAttachmentFile>\",\n                    value: input.files,\n                  })) &&\n                  input.files.every(\n                    (elem, _index1) =>\n                      (((\"object\" === typeof elem && null !== elem) ||\n                        $guard(_exceptionable, {\n                          path: _path + \".files[\" + _index1 + \"]\",\n                          expected: \"IAttachmentFile\",\n                          value: elem,\n                        })) &&\n                        $ao1(\n                          elem,\n                          _path + \".files[\" + _index1 + \"]\",\n                          true && _exceptionable,\n                        )) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".files[\" + _index1 + \"]\",\n                        expected: \"IAttachmentFile\",\n                        value: elem,\n                      }),\n                  )) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files\",\n                    expected: \"Array<IAttachmentFile>\",\n                    value: input.files,\n                  }));\n              const $ao1 = (input, _path, _exceptionable = true) =>\n                (null === input.name ||\n                  (\"string\" === typeof input.name &&\n                    (1 <= input.name.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".name\",\n                        expected: \"string & MinLength<1>\",\n                        value: input.name,\n                      })) &&\n                    (input.name.length <= 255 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".name\",\n                        expected: \"string & MaxLength<255>\",\n                        value: input.name,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".name\",\n                    expected:\n                      \"((string & MinLength<1> & MaxLength<255>) | null)\",\n                    value: input.name,\n                  })) &&\n                (null === input.extension ||\n                  (\"string\" === typeof input.extension &&\n                    (1 <= input.extension.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".extension\",\n                        expected: \"string & MinLength<1>\",\n                        value: input.extension,\n                      })) &&\n                    (input.extension.length <= 8 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".extension\",\n                        expected: \"string & MaxLength<8>\",\n                        value: input.extension,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".extension\",\n                    expected: \"((string & MinLength<1> & MaxLength<8>) | null)\",\n                    value: input.extension,\n                  })) &&\n                ((\"string\" === typeof input.url &&\n                  (/^[a-zA-Z0-9]+:\\/\\/(?:www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_+.~#?&/=]*)$/.test(\n                    input.url,\n                  ) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".url\",\n                      expected: 'string & Format<\"url\">',\n                      value: input.url,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".url\",\n                    expected: '(string & Format<\"url\">)',\n                    value: input.url,\n                  }));\n              return (\n                (((\"object\" === typeof input && null !== input) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IBbsArticle\",\n                    value: input,\n                  })) &&\n                  $ao0(input, _path + \"\", true)) ||\n                $guard(true, {\n                  path: _path + \"\",\n                  expected: \"IBbsArticle\",\n                  value: input,\n                })\n              );\n            })(input, \"$input\", true);\n          return input;\n        };\n        const stringify = (input) => {\n          const $io1 = (input) =>\n            (null === input.name ||\n              (\"string\" === typeof input.name &&\n                1 <= input.name.length &&\n                input.name.length <= 255)) &&\n            (null === input.extension ||\n              (\"string\" === typeof input.extension &&\n                1 <= input.extension.length &&\n                input.extension.length <= 8)) &&\n            \"string\" === typeof input.url &&\n            /^[a-zA-Z0-9]+:\\/\\/(?:www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_+.~#?&/=]*)$/.test(\n              input.url,\n            );\n          const $string = core_1.TypedRoute.Get.string;\n          const $so0 = (input) =>\n            `{\"id\":${$string(input.id)},\"created_at\":${$string(\n              input.created_at,\n            )},\"title\":${$string(input.title)},\"body\":${$string(\n              input.body,\n            )},\"files\":${`[${input.files\n              .map((elem) => $so1(elem))\n              .join(\",\")}]`}}`;\n          const $so1 = (input) =>\n            `{\"name\":${\n              null !== input.name ? $string(input.name) : \"null\"\n            },\"extension\":${\n              null !== input.extension ? $string(input.extension) : \"null\"\n            },\"url\":${$string(input.url)}}`;\n          return $so0(input);\n        };\n        return stringify(assert(input));\n      },\n    }),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", Promise),\n  ],\n  BbsArticlesController.prototype,\n  \"random\",\n  null,\n);\nexports.BbsArticlesController = BbsArticlesController = __decorate(\n  [(0, common_1.Controller)(\"bbs/articles\")],\n  BbsArticlesController,\n);\nJust call @TypedRoute.${method}() function on the target method, that's all.Nestia will analyze your type (IBbsArticle), and writes optimal code for the target type, in the compilation level. If you click the \"Compiled JavaScript File\" tab of above, you can see the optimal validation and JSON serialization code.Such optimization is called AOT (Ahead of Time) compilation, and it is the secret of TypedRoute.","special-tags#Special Tags":"You can enhance validation logic, of TypedRoute, through comment tags.You know what? @TypedRoute.${method}() functions are using typia.assertStringify<T>() function, that is combined with typia.assert<T>() and typia.stringify<T>() functions. It is the secret of @TypedRoute.${method}() functions, which can validates response body data type before JSON serialization, and throws 500 internal server error when the data type is not matched.Also, as typia.assert<T>() function can utililze comment tags for additional validation, TypedRoute also can utillze them, too. For reference, \"Type Tag\" means a intersection type with atomic type and special tag type of typia like number & tags.Type<\"uint32\">, and \"Comment Tag\" means a comment starting from @ symbol following @${name} ${value} format.With those type and comment tags, you can add additional validation logics. If you want to add a custom validation logic, you also can do it. Read below Guide Docments of typia, and see the example code. You may understand how to utilize such type and comment tags, in a few minutes.\ntypia > Validators > Custom Tags\nOutline\nType Tags\nComment Tags\nCustomization\nimport typia, { tags } from \"typia\";\nexport const checkSpecialTag = typia.createIs<SpecialTag>();\ninterface SpecialTag {\n  int32: number & tags.Type<\"int32\">;\n  range?: number & tags.ExclusiveMinimum<19> & tags.Maximum<100>;\n  minLength: string & tags.MinLength<3>;\n  pattern: string & tags.Pattern<\"^[a-z]+$\">;\n  date: null | (string & tags.Format<\"date\">);\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  uuids: Array<string & tags.Format<\"uuid\">> &\n    tags.MinItems<3> &\n    tags.MaxItems<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkSpecialTag = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst checkSpecialTag = (input) => {\n  const $io0 = (input) =>\n    \"number\" === typeof input.int32 &&\n    Math.floor(input.int32) === input.int32 &&\n    -2147483648 <= input.int32 &&\n    input.int32 <= 2147483647 &&\n    (undefined === input.range ||\n      (\"number\" === typeof input.range &&\n        19 < input.range &&\n        input.range <= 100)) &&\n    \"string\" === typeof input.minLength &&\n    3 <= input.minLength.length &&\n    \"string\" === typeof input.pattern &&\n    /^[a-z]+$/.test(input.pattern) &&\n    (null === input.date ||\n      (\"string\" === typeof input.date &&\n        /^(d{4})-(d{2})-(d{2})$/.test(input.date))) &&\n    \"string\" === typeof input.ip &&\n    (/^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n      input.ip,\n    ) ||\n      /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(\n        input.ip,\n      )) &&\n    Array.isArray(input.uuids) &&\n    3 <= input.uuids.length &&\n    input.uuids.length <= 100 &&\n    input.uuids.every(\n      (elem) =>\n        \"string\" === typeof elem &&\n        /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n          elem,\n        ),\n    );\n  return \"object\" === typeof input && null !== input && $io0(input);\n};\nexports.checkSpecialTag = checkSpecialTag;","encrypedroute#EncrypedRoute":"export namespace EncrypedRoute {\n  export function Get(path?: string): MethodDecorator;\n  export function Post(path?: string): MethodDecorator;\n  export function Put(path?: string): MethodDecorator;\n  export function Patch(path?: string): MethodDecorator;\n  export function Delete(path?: string): MethodDecorator;\n}\nEncrypted router decorator functions.EncryptedRoute is a namespaced module similar with TypedRoute, but it encrypts response body data through AES-128/256 CBC algorithm like below. Therefore, it would be slower than TypedRoute, but it guarantees the security of response body data.\nAES-128/256\nCBC mode\nPKCS #5 Padding\nBase64 Encoding\nFor reference, such encryption spec is not supported in the Swagger-UI. Instead, SDK (Software Development Kit) generated by @nestia/sdk supports it. Thus, you have to build and distribute the SDK library to the client developers when using such encryption decorators.","benchmark#Benchmark":"","json#JSON":"Comparing JSON serialization speed, typia is maximum 200x faster than class-transformer.For reference, Nestia is using typia, and NestJS is using class-transformer. The other one fast-json-stringify is made and used by fastify (do not mean NestJS fastify mode, but mean pure fastify library. NestJS fastify mode still utilizes class-transformer), and it requires JSON schema definition.From above benchmark graph, you can see that class-transformer is extremely slower than others, even including built-in JSON.stringify() function. I can't understand why NestJS has adopted such slow and difficult library. The other fast-json-stringify is enough faster, but it needs extra schema definition like class-validator, therefore not easy to use.\ntypia needs only pure TypeScript type.\nclass-transformer requires DTO class with decorator function calls.\nfast-json-stringify requires JSON schema definition.\nMeasured on Intel i5-1135g7, Surface Pro 8","server#Server":"Looking at above benchmark, someone may ask:\nJSON serialization speed affects on the server performance?I think that the JSON serialization is just a tiny thing in the server side, isn't it?\nMy answer is, \"Yes, it affects on the server performance\".Most operations in NodeJS server are asynchronously executed in background thread, what are called \"event based non-blocking I/O model\". However, JSON serialization is a synchronous operation running on the main thread. Therefore, if the JSON serialization speed is slow, it makes the entire server program slow.I'll show you the benchmark result that, how JSON serizliation speed affects on the server performance.\nMeasured on Intel i5-1135g7, Surface Pro 8"}},"/docs/core/TypedBody":{"title":"Typedbody","data":{"outline#Outline":"export function TypedBody(): ParameterDecorator;\nRequest body decorator 20,000x faster, even easy to use.@TypedBody() is a decorator function parsing application/json typed request body, and validates the request body value type through typia.assert<T>() function. If the request body is not following the promised type, 400 bad request error would be thrown.It is almost same with original @Body() function of NestJS, however, 20,000x faster.Also, @TypedBody() is much more easier to use than class-validator, because it can use pure TypeScript type. If you can't understand the word \"pure TypeScript type\", then move to below #How to use section and read the IBbsArticle.IUpdate interface type. You may understand what it means.\nIf you want other Content-Type, use one of below:\napplication/x-www-form-urlencoded: @TypedQuery.Body().\nmultipart/form-data: @TypedFormData.Body()\n@TypedBody() is not essential for Swagger Documents or SDK Library building.Therefore, it is not a matter to use @TypedBody() or @Body() of the original NestJS.","how-to-use#How to use":"import { tags } from \"typia\";\nexport interface IBbsArticle extends IBbsArticle.IStore {\n  id: string & tags.Format<\"uuid\">;\n  created_at: string & tags.Format<\"date-time\">;\n}\nexport namespace IBbsArticle {\n  export interface IStore {\n    title: string & tags.MinLength<3> & tags.MaxLength<50>;\n    body: string;\n    files: IAttachmentFile[];\n  }\n}\nimport { tags } from \"typia\";\nexport interface IAttachmentFile {\n  name: null | (string & tags.MinLength<1> & tags.MaxLength<255>);\n  extension: null | (string & tags.MinLength<1> & tags.MaxLength<8>);\n  url: string & tags.Format<\"url\">;\n}\nimport { TypedBody, TypedRoute } from \"@nestia/core\";\nimport { Controller } from \"@nestjs/common\";\nimport { tags } from \"typia\";\nimport { IBbsArticle } from \"./IBbsArticle\";\n@Controller(\"bbs/articles\")\nexport class BbsArticlesController {\n  @TypedRoute.Post()\n  public async store(\n    @TypedBody() input: IBbsArticle.IStore,\n  ): Promise<IBbsArticle> {\n    return {\n      ...input,\n      id: \"2b5e21d8-0e44-4482-bd3e-4540dee7f3d6\",\n      created_at: \"2023-04-23T12:04:54.168Z\",\n    };\n  }\n}\n\"use strict\";\nvar __decorate =\n  (this && this.__decorate) ||\n  function (decorators, target, key, desc) {\n    var c = arguments.length,\n      r =\n        c < 3\n          ? target\n          : desc === null\n          ? (desc = Object.getOwnPropertyDescriptor(target, key))\n          : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if ((d = decorators[i]))\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\nvar __metadata =\n  (this && this.__metadata) ||\n  function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n      return Reflect.metadata(k, v);\n  };\nvar __param =\n  (this && this.__param) ||\n  function (paramIndex, decorator) {\n    return function (target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\nvar __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done\n          ? resolve(result.value)\n          : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BbsArticlesController = void 0;\nconst core_1 = require(\"@nestia/core\");\nconst common_1 = require(\"@nestjs/common\");\nlet BbsArticlesController = class BbsArticlesController {\n  store(input) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Object.assign(Object.assign({}, input), {\n        id: \"2b5e21d8-0e44-4482-bd3e-4540dee7f3d6\",\n        created_at: \"2023-04-23T12:04:54.168Z\",\n      });\n    });\n  }\n};\nexports.BbsArticlesController = BbsArticlesController;\n__decorate(\n  [\n    core_1.TypedRoute.Post({\n      type: \"assert\",\n      assert: (input) => {\n        const assert = (input) => {\n          const __is = (input) => {\n            const $io0 = (input) =>\n              \"string\" === typeof input.id &&\n              /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n                input.id,\n              ) &&\n              \"string\" === typeof input.created_at &&\n              !isNaN(new Date(input.created_at).getTime()) &&\n              \"string\" === typeof input.title &&\n              3 <= input.title.length &&\n              input.title.length <= 50 &&\n              \"string\" === typeof input.body &&\n              Array.isArray(input.files) &&\n              input.files.every(\n                (elem) =>\n                  \"object\" === typeof elem && null !== elem && $io1(elem),\n              );\n            const $io1 = (input) =>\n              (null === input.name ||\n                (\"string\" === typeof input.name &&\n                  1 <= input.name.length &&\n                  input.name.length <= 255)) &&\n              (null === input.extension ||\n                (\"string\" === typeof input.extension &&\n                  1 <= input.extension.length &&\n                  input.extension.length <= 8)) &&\n              \"string\" === typeof input.url &&\n              /^[a-zA-Z0-9]+:\\/\\/(?:www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_+.~#?&/=]*)$/.test(\n                input.url,\n              );\n            return \"object\" === typeof input && null !== input && $io0(input);\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.TypedRoute.Post.guard;\n              const $ao0 = (input, _path, _exceptionable = true) =>\n                ((\"string\" === typeof input.id &&\n                  (/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n                    input.id,\n                  ) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".id\",\n                      expected: 'string & Format<\"uuid\">',\n                      value: input.id,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".id\",\n                    expected: '(string & Format<\"uuid\">)',\n                    value: input.id,\n                  })) &&\n                ((\"string\" === typeof input.created_at &&\n                  (!isNaN(new Date(input.created_at).getTime()) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".created_at\",\n                      expected: 'string & Format<\"date-time\">',\n                      value: input.created_at,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".created_at\",\n                    expected: '(string & Format<\"date-time\">)',\n                    value: input.created_at,\n                  })) &&\n                ((\"string\" === typeof input.title &&\n                  (3 <= input.title.length ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MinLength<3>\",\n                      value: input.title,\n                    })) &&\n                  (input.title.length <= 50 ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MaxLength<50>\",\n                      value: input.title,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".title\",\n                    expected: \"(string & MinLength<3> & MaxLength<50>)\",\n                    value: input.title,\n                  })) &&\n                (\"string\" === typeof input.body ||\n                  $guard(_exceptionable, {\n                    path: _path + \".body\",\n                    expected: \"string\",\n                    value: input.body,\n                  })) &&\n                (((Array.isArray(input.files) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files\",\n                    expected: \"Array<IAttachmentFile>\",\n                    value: input.files,\n                  })) &&\n                  input.files.every(\n                    (elem, _index1) =>\n                      (((\"object\" === typeof elem && null !== elem) ||\n                        $guard(_exceptionable, {\n                          path: _path + \".files[\" + _index1 + \"]\",\n                          expected: \"IAttachmentFile\",\n                          value: elem,\n                        })) &&\n                        $ao1(\n                          elem,\n                          _path + \".files[\" + _index1 + \"]\",\n                          true && _exceptionable,\n                        )) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".files[\" + _index1 + \"]\",\n                        expected: \"IAttachmentFile\",\n                        value: elem,\n                      }),\n                  )) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files\",\n                    expected: \"Array<IAttachmentFile>\",\n                    value: input.files,\n                  }));\n              const $ao1 = (input, _path, _exceptionable = true) =>\n                (null === input.name ||\n                  (\"string\" === typeof input.name &&\n                    (1 <= input.name.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".name\",\n                        expected: \"string & MinLength<1>\",\n                        value: input.name,\n                      })) &&\n                    (input.name.length <= 255 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".name\",\n                        expected: \"string & MaxLength<255>\",\n                        value: input.name,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".name\",\n                    expected:\n                      \"((string & MinLength<1> & MaxLength<255>) | null)\",\n                    value: input.name,\n                  })) &&\n                (null === input.extension ||\n                  (\"string\" === typeof input.extension &&\n                    (1 <= input.extension.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".extension\",\n                        expected: \"string & MinLength<1>\",\n                        value: input.extension,\n                      })) &&\n                    (input.extension.length <= 8 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".extension\",\n                        expected: \"string & MaxLength<8>\",\n                        value: input.extension,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".extension\",\n                    expected: \"((string & MinLength<1> & MaxLength<8>) | null)\",\n                    value: input.extension,\n                  })) &&\n                ((\"string\" === typeof input.url &&\n                  (/^[a-zA-Z0-9]+:\\/\\/(?:www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_+.~#?&/=]*)$/.test(\n                    input.url,\n                  ) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".url\",\n                      expected: 'string & Format<\"url\">',\n                      value: input.url,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".url\",\n                    expected: '(string & Format<\"url\">)',\n                    value: input.url,\n                  }));\n              return (\n                (((\"object\" === typeof input && null !== input) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IBbsArticle\",\n                    value: input,\n                  })) &&\n                  $ao0(input, _path + \"\", true)) ||\n                $guard(true, {\n                  path: _path + \"\",\n                  expected: \"IBbsArticle\",\n                  value: input,\n                })\n              );\n            })(input, \"$input\", true);\n          return input;\n        };\n        const stringify = (input) => {\n          const $io1 = (input) =>\n            (null === input.name ||\n              (\"string\" === typeof input.name &&\n                1 <= input.name.length &&\n                input.name.length <= 255)) &&\n            (null === input.extension ||\n              (\"string\" === typeof input.extension &&\n                1 <= input.extension.length &&\n                input.extension.length <= 8)) &&\n            \"string\" === typeof input.url &&\n            /^[a-zA-Z0-9]+:\\/\\/(?:www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_+.~#?&/=]*)$/.test(\n              input.url,\n            );\n          const $string = core_1.TypedRoute.Post.string;\n          const $so0 = (input) =>\n            `{\"id\":${$string(input.id)},\"created_at\":${$string(\n              input.created_at,\n            )},\"title\":${$string(input.title)},\"body\":${$string(\n              input.body,\n            )},\"files\":${`[${input.files\n              .map((elem) => $so1(elem))\n              .join(\",\")}]`}}`;\n          const $so1 = (input) =>\n            `{\"name\":${\n              null !== input.name ? $string(input.name) : \"null\"\n            },\"extension\":${\n              null !== input.extension ? $string(input.extension) : \"null\"\n            },\"url\":${$string(input.url)}}`;\n          return $so0(input);\n        };\n        return stringify(assert(input));\n      },\n    }),\n    __param(\n      0,\n      (0, core_1.TypedBody)({\n        type: \"assert\",\n        assert: (input) => {\n          const __is = (input) => {\n            const $io0 = (input) =>\n              \"string\" === typeof input.title &&\n              3 <= input.title.length &&\n              input.title.length <= 50 &&\n              \"string\" === typeof input.body &&\n              Array.isArray(input.files) &&\n              input.files.every(\n                (elem) =>\n                  \"object\" === typeof elem && null !== elem && $io1(elem),\n              );\n            const $io1 = (input) =>\n              (null === input.name ||\n                (\"string\" === typeof input.name &&\n                  1 <= input.name.length &&\n                  input.name.length <= 255)) &&\n              (null === input.extension ||\n                (\"string\" === typeof input.extension &&\n                  1 <= input.extension.length &&\n                  input.extension.length <= 8)) &&\n              \"string\" === typeof input.url &&\n              /^[a-zA-Z0-9]+:\\/\\/(?:www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_+.~#?&/=]*)$/.test(\n                input.url,\n              );\n            return \"object\" === typeof input && null !== input && $io0(input);\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.TypedBody.guard;\n              const $ao0 = (input, _path, _exceptionable = true) =>\n                ((\"string\" === typeof input.title &&\n                  (3 <= input.title.length ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MinLength<3>\",\n                      value: input.title,\n                    })) &&\n                  (input.title.length <= 50 ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MaxLength<50>\",\n                      value: input.title,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".title\",\n                    expected: \"(string & MinLength<3> & MaxLength<50>)\",\n                    value: input.title,\n                  })) &&\n                (\"string\" === typeof input.body ||\n                  $guard(_exceptionable, {\n                    path: _path + \".body\",\n                    expected: \"string\",\n                    value: input.body,\n                  })) &&\n                (((Array.isArray(input.files) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files\",\n                    expected: \"Array<IAttachmentFile>\",\n                    value: input.files,\n                  })) &&\n                  input.files.every(\n                    (elem, _index1) =>\n                      (((\"object\" === typeof elem && null !== elem) ||\n                        $guard(_exceptionable, {\n                          path: _path + \".files[\" + _index1 + \"]\",\n                          expected: \"IAttachmentFile\",\n                          value: elem,\n                        })) &&\n                        $ao1(\n                          elem,\n                          _path + \".files[\" + _index1 + \"]\",\n                          true && _exceptionable,\n                        )) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".files[\" + _index1 + \"]\",\n                        expected: \"IAttachmentFile\",\n                        value: elem,\n                      }),\n                  )) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files\",\n                    expected: \"Array<IAttachmentFile>\",\n                    value: input.files,\n                  }));\n              const $ao1 = (input, _path, _exceptionable = true) =>\n                (null === input.name ||\n                  (\"string\" === typeof input.name &&\n                    (1 <= input.name.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".name\",\n                        expected: \"string & MinLength<1>\",\n                        value: input.name,\n                      })) &&\n                    (input.name.length <= 255 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".name\",\n                        expected: \"string & MaxLength<255>\",\n                        value: input.name,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".name\",\n                    expected:\n                      \"((string & MinLength<1> & MaxLength<255>) | null)\",\n                    value: input.name,\n                  })) &&\n                (null === input.extension ||\n                  (\"string\" === typeof input.extension &&\n                    (1 <= input.extension.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".extension\",\n                        expected: \"string & MinLength<1>\",\n                        value: input.extension,\n                      })) &&\n                    (input.extension.length <= 8 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".extension\",\n                        expected: \"string & MaxLength<8>\",\n                        value: input.extension,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".extension\",\n                    expected: \"((string & MinLength<1> & MaxLength<8>) | null)\",\n                    value: input.extension,\n                  })) &&\n                ((\"string\" === typeof input.url &&\n                  (/^[a-zA-Z0-9]+:\\/\\/(?:www.)?[-a-zA-Z0-9@:%._+~#=]{1,256}.[a-zA-Z0-9()]{1,6}\\b(?:[-a-zA-Z0-9()@:%_+.~#?&/=]*)$/.test(\n                    input.url,\n                  ) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".url\",\n                      expected: 'string & Format<\"url\">',\n                      value: input.url,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".url\",\n                    expected: '(string & Format<\"url\">)',\n                    value: input.url,\n                  }));\n              return (\n                (((\"object\" === typeof input && null !== input) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IBbsArticle.IStore\",\n                    value: input,\n                  })) &&\n                  $ao0(input, _path + \"\", true)) ||\n                $guard(true, {\n                  path: _path + \"\",\n                  expected: \"IBbsArticle.IStore\",\n                  value: input,\n                })\n              );\n            })(input, \"$input\", true);\n          return input;\n        },\n      }),\n    ),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Promise),\n  ],\n  BbsArticlesController.prototype,\n  \"store\",\n  null,\n);\nexports.BbsArticlesController = BbsArticlesController = __decorate(\n  [(0, common_1.Controller)(\"bbs/articles\")],\n  BbsArticlesController,\n);\nJust call @TypedBody() function on the request body parameter, that's all.Nestia will analyze your type (IBbsArticle.IUpdate), and writes optimal code for the target type, in the compilation level. If you click the \"Complied JavaScript File\" tab of above, you can see the optimal validation code.Such optimization is called AOT (Ahead of Time) compilation, and it is the secret of @TypedBody.","special-tags#Special Tags":"You can enhance validation logic, of @TypedBody(), through special tags.You know what? @TypedBody() utilizes typia.assert<T>() function for request body data validation, and the typia.assert<T>() function supports additional type checking logics through type and comment tags. For reference, \"Type Tag\" means a intersection type with atomic type and special tag type of typia like number & tags.Type<\"uint32\">, and \"Comment Tag\" means a comment starting from @ symbol following @${name} ${value} format.With those type and comment tags, you can add additional validation logics. If you want to add a custom validation logic, you also can do it. Read below Guide Docments of typia, and see the example code. You may understand how to utilize such type and comment tags, in a few minutes.\ntypia > Validators > Custom Tags\nOutline\nType Tags\nComment Tags\nCustomization\nimport typia, { tags } from \"typia\";\nexport const checkSpecialTag = typia.createIs<SpecialTag>();\ninterface SpecialTag {\n  int32: number & tags.Type<\"int32\">;\n  range?: number & tags.ExclusiveMinimum<19> & tags.Maximum<100>;\n  minLength: string & tags.MinLength<3>;\n  pattern: string & tags.Pattern<\"^[a-z]+$\">;\n  date: null | (string & tags.Format<\"date\">);\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  uuids: Array<string & tags.Format<\"uuid\">> &\n    tags.MinItems<3> &\n    tags.MaxItems<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkSpecialTag = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst checkSpecialTag = (input) => {\n  const $io0 = (input) =>\n    \"number\" === typeof input.int32 &&\n    Math.floor(input.int32) === input.int32 &&\n    -2147483648 <= input.int32 &&\n    input.int32 <= 2147483647 &&\n    (undefined === input.range ||\n      (\"number\" === typeof input.range &&\n        19 < input.range &&\n        input.range <= 100)) &&\n    \"string\" === typeof input.minLength &&\n    3 <= input.minLength.length &&\n    \"string\" === typeof input.pattern &&\n    /^[a-z]+$/.test(input.pattern) &&\n    (null === input.date ||\n      (\"string\" === typeof input.date &&\n        /^(d{4})-(d{2})-(d{2})$/.test(input.date))) &&\n    \"string\" === typeof input.ip &&\n    (/^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n      input.ip,\n    ) ||\n      /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(\n        input.ip,\n      )) &&\n    Array.isArray(input.uuids) &&\n    3 <= input.uuids.length &&\n    input.uuids.length <= 100 &&\n    input.uuids.every(\n      (elem) =>\n        \"string\" === typeof elem &&\n        /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n          elem,\n        ),\n    );\n  return \"object\" === typeof input && null !== input && $io0(input);\n};\nexports.checkSpecialTag = checkSpecialTag;","configuration#Configuration":"{\n  \"strict\": true,\n  \"strictNullChecks\": true,\n  \"compilerOptions\": {\n    \"plugins\": [\n      { \"transform\": \"typia/lib/transform\" },\n      { \n        \"transform\": \"@nestia/core/lib/transform\",\n        \"validate\": \"valiateEquals\",\n        \"stringify\": \"assert\", \n      },\n    ],\n  },\n}\nChange type validation function to other one.If you configure validate property of plugin defined in the tsconfig.json file, you can change the @TypedBody() to use another validation function instead of using the default typia.assert<T> function. For example, if you want to use typia.validateEquals<T>() function instead, then set the validate property to validateEquals.Below is the list of available validation functions.\nis or equals: check validation only, and do not reveal the reason why\nassert or assertEquals: find the 1st type error with reason\nvalidate or validateEquals: find every type errors with detailed reasons\nassertPrune or validatePrune: prune extra properties with type checking\nassertClone or validateClone: deep clone with type checking for faster pruning","encryptedbody#EncryptedBody":"Encrypted request body decorator function.@EncryptedBody() is a decorator function similar with @TypedBody(), but it encrypts the request body through AES-128/256-CBC algorithm like below. Therefore, it would be slower than @TypedBody(), but it guarantees the security of request body data.\nAES-128/256\nCBC mode\nPKCS #5 Padding\nBase64 Encoding\nFor reference, such encryption spec is not supported in the Swagger-UI. Instead, SDK (Software Development Kit) generated by @nestia/sdk supports it. Thus, you have to build and distribute the SDK library to the client developers when using such encryption decorators.","benchmark#Benchmark":"Super-fast and super-safe.Nestia utilizes typia, and NestJS uses class-validator. One thing amazing is, typia is maximum 20,000x faster than class-validator of NestJS. Color of class-transformer is skyblue, and can you find the skyblue color in the below benchmark graph? It may hard to find because class-validator is extremely slow.\nMeasured on Intel i5-1135g7, Surface Pro 8\nFurthermore, while other libraries can't validate complicate union types, typia can validate every TypeScript types. However, in the class-validator case, it always be failed when any type of complicate comes. I can't understand why NestJS has adopted such slow and unstable library.Moreover, only typia can utilize pure TypeScript type, without any extra schema definition. Beside, all of other libraries require extra and duplicated schema definition, different with pure TypeScript type. Nestia is using such wonderful, super-fast and super-fast typia library.\nTypeBox requires TypeBox schema\najv requires JSON schema definition\nio-ts requires io-ts schema\nzod requires zod schema\nclass-validator requires DTO class with decorator function calls\nComponents\ttypia\tTypeBox\tajv\tio-ts\tzod\tC.V.\tEasy to use\t✅\t❌\t❌\t❌\t❌\t❌\tObject (simple)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (hierarchical)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (recursive)\t✔\t❌\t✔\t✔\t✔\t✔\t✔\tObject (union, implicit)\t✅\t❌\t❌\t❌\t❌\t❌\tObject (union, explicit)\t✔\t✔\t✔\t✔\t✔\t❌\tObject (additional tags)\t✔\t✔\t✔\t✔\t✔\t✔\tObject (template literal types)\t✔\t✔\t✔\t❌\t❌\t❌\tObject (dynamic properties)\t✔\t✔\t✔\t❌\t❌\t❌\tArray (rest tuple)\t✅\t❌\t❌\t❌\t❌\t❌\tArray (hierarchical)\t✔\t✔\t✔\t✔\t✔\t✔\tArray (recursive)\t✔\t✔\t✔\t✔\t✔\t❌\tArray (recursive, union)\t✔\t✔\t❌\t✔\t✔\t❌\tArray (R+U, implicit)\t✅\t❌\t❌\t❌\t❌\t❌\tUltimate Union Type\t✅\t❌\t❌\t❌\t❌\t❌\t\nC.V. means class-validator"}},"/docs/core/TypedFormData":{"title":"Typedformdata","data":{"outline#Outline":"export namespace TypedFormData {\n  export function Body(): ParameterDecorator;\n}\nRequest body decorator of multipart/form-data.@TypedFormData.Body() is a request body decorator function, for the multipart/form-data content type. It is useful for file uploading with additional data, and automatically casts property type following its DTO definition, performing the type validation.As you can see from the below code, @TypedFormData.Body() function is much easier and type safer than @UploadFile() of NestJS. Also, if you're considering the SDK library generation, only @TypedFormData.Body() is supported. Therefore, I recommend you to utilize @TypedFormData.Body() instead of the @UploadFile() function.Of course, as every features of nestia does, you don't need to define any extra schema definition for the Swagger Documents generation. @nestia/sdk and @TypedFormData.Body() will do everything just by analyzing your TypeScript types and codes.\nimport { TypedFormData, TypedRoute } from \"@nestia/core\";\nimport { Controller } from \"@nestjs/common\";\n@Controller(\"bbs/articles\")\nexport class BbsArticlesController {\n  @TypedRoute.Post()\n  public async create(\n    @TypedFormData.Body() input: IBbsArticleCreate,\n  ): Promise<void> {\n    input;\n  }\n}\nexport interface IBbsArticleCreate {\n  title: string;\n  body: string | null;\n  thumbnail?: File | undefined;\n  files: File[];\n  tags: string[];\n}\nimport { \n  Body, \n  Controller, \n  Post, \n  UploadedFile, \n  UploadedFiles, \n  UseInterceptors \n} from \"@nestjs/common\";\nimport { ApiBody, ApiConsumes } from \"@nestjs/swagger\";\nimport { FileFieldsInterceptor } from \"@nestjs/platform-express\";\nimport { IsArray, IsOptional, IsString } from \"class-validator\";\n@Controller(\"bbs/articles\")\nexport class BbsArticlesController {\n  @Post()\n  @ApiConsumes(\"multipart/form-data\")\n  @UseInterceptors(\n    FileFieldsInterceptor([\n      { name: \"thumbnail\", maxCount: 1 },\n      { name: \"files\" },\n    ]),\n  )\n  @ApiBody({\n    schema: {\n      type: \"object\",\n      properties: {\n        title: {\n          type: \"string\",\n        },\n        body: {\n          type: \"string\",\n          nullable: true,\n        },\n        thumbnail: {\n          type: \"string\",\n          format: \"binary\",\n        },\n        files: {\n          type: \"array\",\n          items: {\n            type: \"string\",\n            format: \"binary\",\n          },\n        },\n      },\n      required: [\n        \"id\", \n        \"title\", \n        \"body\", \n        \"files\",\n        \"tags\",\n        \"created_at\",\n      ],\n    },\n  })\n  public async create(\n    @Body() input: BbsArticleCreateDto,\n    @UploadedFiles() binary: {\n      thumbnail?: Express.Multer.File[];\n      files: Express.Multer.File[];\n    },\n  ): Promise<void> {\n    input;\n    binary;\n  }\n}\nexport class BbsArticleCreateDto {\n  @IsString()\n  title: string;\n  @IsString()\n  @IsOptional()\n  body: string | null;\n  @IsArray({ each: true })\n  @IsString()\n  tags: string[];\n}","how-to-use#How to use":"export interface IBbsArticleCreate {\n  title: string;\n  body: string | null;\n  thumbnail?: File | undefined;\n  files: File[];\n  tags: string[];\n}\nimport { TypedFormData, TypedRoute } from \"@nestia/core\";\nimport { Controller } from \"@nestjs/common\";\nimport { IBbsArticleCreate } from \"./IBbsArticleCreate\";\n@Controller(\"bbs/articles\")\nexport class BbsArticlesController {\n  @TypedRoute.Post()\n  public async create(\n    @TypedFormData.Body() input: IBbsArticleCreate,\n  ): Promise<void> {\n    input;\n  }\n}\n\"use strict\";\nvar __decorate =\n  (this && this.__decorate) ||\n  function (decorators, target, key, desc) {\n    var c = arguments.length,\n      r =\n        c < 3\n          ? target\n          : desc === null\n          ? (desc = Object.getOwnPropertyDescriptor(target, key))\n          : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if ((d = decorators[i]))\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\nvar __metadata =\n  (this && this.__metadata) ||\n  function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n      return Reflect.metadata(k, v);\n  };\nvar __param =\n  (this && this.__param) ||\n  function (paramIndex, decorator) {\n    return function (target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\nvar __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done\n          ? resolve(result.value)\n          : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BbsArticlesController = void 0;\nconst core_1 = require(\"@nestia/core\");\nconst common_1 = require(\"@nestjs/common\");\nlet BbsArticlesController = class BbsArticlesController {\n  create(input) {\n    return __awaiter(this, void 0, void 0, function* () {\n      input;\n    });\n  }\n};\nexports.BbsArticlesController = BbsArticlesController;\n__decorate(\n  [\n    core_1.TypedRoute.Post({\n      type: \"assert\",\n      assert: (input) => {\n        const assert = (input) => {\n          const __is = (input) => {\n            return null !== input && undefined === input;\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.TypedRoute.Post.guard;\n              return (\n                (null !== input ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"undefined\",\n                    value: input,\n                  })) &&\n                (undefined === input ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"undefined\",\n                    value: input,\n                  }))\n              );\n            })(input, \"$input\", true);\n          return input;\n        };\n        const stringify = (input) => {\n          return undefined;\n        };\n        return stringify(assert(input));\n      },\n    }),\n    __param(\n      0,\n      core_1.TypedFormData.Body({\n        files: [\n          {\n            name: \"thumbnail\",\n            limit: 1,\n          },\n          {\n            name: \"files\",\n            limit: null,\n          },\n        ],\n        validator: {\n          type: \"assert\",\n          assert: (input) => {\n            const decode = (input) => {\n              var _a;\n              const $string = core_1.TypedFormData.Body.string;\n              const $file = core_1.TypedFormData.Body.file;\n              const output = {\n                title: $string(input.get(\"title\")),\n                body: $string(input.get(\"body\")),\n                thumbnail:\n                  (_a = $file(input.get(\"thumbnail\"))) !== null && _a !== void 0\n                    ? _a\n                    : undefined,\n                files: input.getAll(\"files\").map((elem) => $file(elem)),\n                tags: input.getAll(\"tags\").map((elem) => $string(elem)),\n              };\n              return output;\n            };\n            const assert = (input) => {\n              const __is = (input) => {\n                const $io0 = (input) =>\n                  \"string\" === typeof input.title &&\n                  (null === input.body || \"string\" === typeof input.body) &&\n                  (undefined === input.thumbnail ||\n                    input.thumbnail instanceof File) &&\n                  Array.isArray(input.files) &&\n                  input.files.every((elem) => elem instanceof File) &&\n                  Array.isArray(input.tags) &&\n                  input.tags.every((elem) => \"string\" === typeof elem);\n                return (\n                  \"object\" === typeof input && null !== input && $io0(input)\n                );\n              };\n              if (false === __is(input))\n                ((input, _path, _exceptionable = true) => {\n                  const $guard = core_1.TypedFormData.Body.guard;\n                  const $ao0 = (input, _path, _exceptionable = true) =>\n                    (\"string\" === typeof input.title ||\n                      $guard(_exceptionable, {\n                        path: _path + \".title\",\n                        expected: \"string\",\n                        value: input.title,\n                      })) &&\n                    (null === input.body ||\n                      \"string\" === typeof input.body ||\n                      $guard(_exceptionable, {\n                        path: _path + \".body\",\n                        expected: \"(null | string)\",\n                        value: input.body,\n                      })) &&\n                    (undefined === input.thumbnail ||\n                      input.thumbnail instanceof File ||\n                      $guard(_exceptionable, {\n                        path: _path + \".thumbnail\",\n                        expected: \"(File | undefined)\",\n                        value: input.thumbnail,\n                      })) &&\n                    (((Array.isArray(input.files) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".files\",\n                        expected: \"Array<File>\",\n                        value: input.files,\n                      })) &&\n                      input.files.every(\n                        (elem, _index1) =>\n                          elem instanceof File ||\n                          $guard(_exceptionable, {\n                            path: _path + \".files[\" + _index1 + \"]\",\n                            expected: \"File\",\n                            value: elem,\n                          }),\n                      )) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".files\",\n                        expected: \"Array<File>\",\n                        value: input.files,\n                      })) &&\n                    (((Array.isArray(input.tags) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".tags\",\n                        expected: \"Array<string>\",\n                        value: input.tags,\n                      })) &&\n                      input.tags.every(\n                        (elem, _index2) =>\n                          \"string\" === typeof elem ||\n                          $guard(_exceptionable, {\n                            path: _path + \".tags[\" + _index2 + \"]\",\n                            expected: \"string\",\n                            value: elem,\n                          }),\n                      )) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".tags\",\n                        expected: \"Array<string>\",\n                        value: input.tags,\n                      }));\n                  return (\n                    (((\"object\" === typeof input && null !== input) ||\n                      $guard(true, {\n                        path: _path + \"\",\n                        expected: \"IBbsArticleCreate\",\n                        value: input,\n                      })) &&\n                      $ao0(input, _path + \"\", true)) ||\n                    $guard(true, {\n                      path: _path + \"\",\n                      expected: \"IBbsArticleCreate\",\n                      value: input,\n                    })\n                  );\n                })(input, \"$input\", true);\n              return input;\n            };\n            const output = decode(input);\n            return assert(output);\n          },\n        },\n      }),\n    ),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Promise),\n  ],\n  BbsArticlesController.prototype,\n  \"create\",\n  null,\n);\nexports.BbsArticlesController = BbsArticlesController = __decorate(\n  [(0, common_1.Controller)(\"bbs/articles\")],\n  BbsArticlesController,\n);\n//# sourceMappingURL=BbsArticlesController.js.map\nJust call @TypedFormData.Body() function on the request body parameter, that's all.Nestia will analyze your type (IBbsArticleCreate), and writes optimal code for the target type, in the compilation level. If you click the \"Compiled JavaScript File\" tab of above, you can see the optimal transformation and validation code.Such optimization is called AOT (Ahead of Time) compilation, and it is the secret of @TypedFormData.Body.By the way, if you're using fastify, you have to setup @fastify/multipart and configure like below when composing the NestJS application. If you don't do it, @TypedFormData.Body() will not work properly, and throw 500 internal server error when Blob or File type being utilized.\nimport multipart from \"fastify-multipart\";\nimport { NestFactory } from \"@nestjs/core\";\nimport { \n  FastifyAdapter, \n  NestFastifyApplication \n} from \"@nestjs/platform-fastify\";\nexport async function main() {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter(),\n  );\n  app.register(multipart);\n  await app.listen(3000);\n}","special-tags#Special Tags":"You can enhance validation logic, of @TypedFormData.Body(), through comment tags.You know what? @TypedFormData.Body() utilizes typia.assert<T>() function for form data validation, and the typia.assert<T>() function supports additional type checking logics through comment tags. For reference, \"Type Tag\" means a intersection type with atomic type and special tag type of typia like number & tags.Type<\"uint32\">, and \"Comment Tag\" means a comment starting from @ symbol following @${name} ${value} format.With those type and comment tags, you can add additional validation logics. If you want to add a custom validation logic, you also can do it. Read below Guide Documents of typia, and see the example code. You may understand how to utilize such type and comment tags, in a few minutes.\ntypia > Validators > Custom Tags\nOutline\nType Tags\nComment Tags\nCustomization\nimport typia, { tags } from \"typia\";\nexport const checkSpecialTag = typia.createIs<SpecialTag>();\ninterface SpecialTag {\n  int32: number & tags.Type<\"int32\">;\n  range?: number & tags.ExclusiveMinimum<19> & tags.Maximum<100>;\n  minLength: string & tags.MinLength<3>;\n  pattern: string & tags.Pattern<\"^[a-z]+$\">;\n  date: null | (string & tags.Format<\"date\">);\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  uuids: Array<string & tags.Format<\"uuid\">> &\n    tags.MinItems<3> &\n    tags.MaxItems<100>;\n}\n\"use strict\";\nvar __importDefault =\n  (this && this.__importDefault) ||\n  function (mod) {\n    return mod && mod.__esModule ? mod : { default: mod };\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.checkSpecialTag = void 0;\nconst typia_1 = __importDefault(require(\"typia\"));\nconst checkSpecialTag = (input) => {\n  const $io0 = (input) =>\n    \"number\" === typeof input.int32 &&\n    Math.floor(input.int32) === input.int32 &&\n    -2147483648 <= input.int32 &&\n    input.int32 <= 2147483647 &&\n    (undefined === input.range ||\n      (\"number\" === typeof input.range &&\n        19 < input.range &&\n        input.range <= 100)) &&\n    \"string\" === typeof input.minLength &&\n    3 <= input.minLength.length &&\n    \"string\" === typeof input.pattern &&\n    /^[a-z]+$/.test(input.pattern) &&\n    (null === input.date ||\n      (\"string\" === typeof input.date &&\n        /^(d{4})-(d{2})-(d{2})$/.test(input.date))) &&\n    \"string\" === typeof input.ip &&\n    (/^(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(\n      input.ip,\n    ) ||\n      /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]).){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/.test(\n        input.ip,\n      )) &&\n    Array.isArray(input.uuids) &&\n    3 <= input.uuids.length &&\n    input.uuids.length <= 100 &&\n    input.uuids.every(\n      (elem) =>\n        \"string\" === typeof elem &&\n        /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i.test(\n          elem,\n        ),\n    );\n  return \"object\" === typeof input && null !== input && $io0(input);\n};\nexports.checkSpecialTag = checkSpecialTag;","restriction#Restriction":"When using @TypedFormData.Body(), you've to follow such restrction.At first, type of @TypedFormData.Body() must be a pure object type. It does not allow union type. Also, nullable and undefindable types are not allowed, either. Note that, query parameter type must be a sole object type without any extra definition.At next, type of properties must be atomic, Blob, File or array of them. In the atomic type case, the atomic type allows both nullable and undefindable types. However, mixed union atomic type like string | number or \"1\" | \"2\" | 3 are not allowed. Also, the array type does not allow both nullable and undefindable types, either.\nboolean\nnumber\nbigint\nstring\nBlob\nFile\nexport interface SomeFormDataDto {\n  //----\n  // ATOMIC OR FILE TYPES\n  //----\n  // ALLOWED\n  boolean: boolean;\n  number: number;\n  string: string;\n  bigint: bigint;\n  optional_number?: number;\n  nullable_string: string | null;\n  literal_union: \"A\" | \"B\" | \"C\" | \"D\";\n  blob: Blob;\n  file: File;\n  // NOT ALLOWED\n  mixed_union: string | number | boolean;\n  mixed_literal: \"A\" | \"B\" | 3;\n  //----\n  // ARRAY TYPES\n  //----\n  // ALLOWED\n  nullable_element_array: (string | null)[];\n  string_array: string[];\n  number_array: number[];\n  literal_union_array: (\"A\" | \"B\" | \"C\")[];\n  literal_tuple: [\"A\", \"B\", \"C\"];\n  blobs: Blob[];\n  files: File[];\n  // NOT ALLOWED\n  optional_element_array: (string | undefined)[];\n  optional_array: string[] | undefined;\n  nullable_array: string[] | null;\n  union_atomic_array: (string | number)[];\n  mixed_literal_array: (\"A\", \"B\", 3)[];\n  mixed_tuple: [\"A\", \"B\", 3];\n}"}},"/docs/pure":{"title":"Pure TypeScript","data":{"outline#Outline":"nestia can use pure TypeScript type.You know what? NestJS needs triple duplicated DTO schema definitions. The 1st is defining TypeScript type, the 2nd and 3rd are calling decorator functions of class-validator and @nestjs/swagger. It's not only annoying, but also error-prone. If you take any mistake on the 2nd or 3rd, it can't be detected by TypeScript compiler. It will be detected only at runtime. Another words, it is not type safe.Besides, nestia needs only pure TypeScript type. You don't need to define any extra schema like class-validator or @nestjs/swagger. Just define pure TypeScript type only (especially recommend to use interface type), then nestia will do all the rest.","demonstration#Demonstration":"If you're confusing how DTO of NestJS and nestia are different, just see example codes below.At first, look at the first (Triple duplicated NestJS DTO) tab, and find the BbsArticle.files property, enhanced by blue coloured blocks. Looking at the files property, how do you feel? Just defining an array object type, you've to call 7 decorator functions. If you take any mistake when using the decorator like omitting isArray property, it would be a critical runtime error.Besides, nestia needs only one line. Click the second (Pure Nestia DTO) tab, and find the IAttachmentFile.files property. Only one line being used, and IBbsArticle and IAttachment types are not even class, but just interface types. Comparing it to the first tab, how do you feel? Isn't it more simple and readable?This is the power of nestia, with pure TypeScript type.\nimport { ApiProperty } from \"@nestjs/swagger\";\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsObject,\n  IsOptional,\n  IsString,\n  Match,\n  MaxLength,\n  Type,\n  ValidateNested,\n} from \"class-validator\";\nexport class BbsArticle {\n  @ApiProperty({\n    format: \"uuid\",\n  })\n  @IsString()\n  id!: string;\n  // DUPLICATED SCHEMA DEFINITION\n  // - duplicated function call + property type\n  // - have to specify `isArray` and `nullable` props by yourself\n  @ApiProperty({\n    type: () => AttachmentFile,\n    nullable: true,\n    isArray: true,\n    description: \"List of attached files.\",\n  })\n  @Type(() => AttachmentFile)\n  @IsArray()\n  @IsOptional()\n  @IsObject({ each: true })\n  @ValidateNested({ each: true })\n  files!: AttachmentFile[] | null;\n  @ApiProperty({\n    type: \"string\",\n    nullable: true,\n    minLength: 5,\n    maxLength: 100,\n    description: \"Title of the article.\",\n  })\n  @IsOptional()\n  @IsString()\n  title!: string | null;\n  @ApiProperty({\n    description: \"Main content body of the article.\",\n  })\n  @IsString()\n  body!: string;\n  @ApiProperty({\n    format: \"date-time\",\n    description: \"Creation time of article\",\n  })\n  @IsString()\n  created_at!: string;\n}\nexport class AttachmentFile {\n  @ApiProperty({\n    type: \"string\",\n    maxLength: 255,\n    pattern: \"^[a-zA-Z0-9-_]+$\",\n    description: \"File name.\",\n  })\n  @Matches(/^[a-z0-9]+$/)\n  @MaxLength(255)\n  @IsString()\n  name!: string | null;\n  @ApiProperty({\n    type: \"string\",\n    nullable: true,\n    maxLength: 255,\n    pattern: \"^[a-zA-Z0-9-_]+$\",\n    description: \"File extension.\",\n  })\n  @Matches(/^[a-z0-9]+$/)\n  @MaxLength(8)\n  @IsOptional()\n  @IsString()\n  extension!: string | null;\n  @ApiProperty({\n    format: \"url\",\n    description: \"URL of the file.\",\n  })\n  @IsString()\n  url!: string;\n}\nimport { tags } from \"typia\";\nexport interface IBbsArticle {\n  /**\n   * Primary Key.\n   */\n  id: string & tags.Format<\"uuid\">;\n  /**\n   * List of attached files.\n   */\n  files: null | IAttachmentFile[];\n  /**\n   * Title of the article.\n   *\n   * @minLength 5\n   * @maxLength 100\n   */\n  title: null | (string & tags.MinLength<5> & tags.MaxLength<100>);\n  /**\n   * Main content body of the article.\n   */\n  body: string;\n  /**\n   * Creation time of article.\n   *\n   * @format date-time\n   */\n  created_at: string & tags.Format<\"date-time\">;\n}\nexport interface IAttachmentFile {\n  /**\n   * File name.\n   *\n   * @pattern ^[a-z0-9]+$\n   * @maxLength 255\n   */\n  name: string & tags.Pattern<\"^[a-z0-9]+$\"> & tags.MaxLength<255>;\n  /**\n   * File extension.\n   */\n  extension: null | (string & tags.Pattern<\"^[a-z0-9]+$\"> & tags.MaxLength<8>);\n  /**\n   * URL of the file.\n   */\n  url: string;\n}","aot-compilation#AOT Compilation":"Someone may be suspicious of the phrase \"Pure TypeScript Type\".\n\"As you know, TypeScript types do not have any tangible instance when compiled to JS.However, with only these fictitious TypeScript types, how can nestia validates types at runtime? How nestia builds swagger documents or SDK library with only these types? Are these things really possible without extra schema definition like class-validator or @nestjs/swagger?\"\nMy answer is: \"Yes, it is possible due to nestia analyzes your server code, and performs AOT compilation\".When compiling, nestia travels your NestJS server codes, and analyzes DTO definitions. And then, nestia writes optimal code to the compiled JavaScript file. In the @TypedBody() case, nestia transforms it to optimal validation code for the IBbsArticle.IStore type. Also, nestia transforms @TypedRoute.Post() function to optimal JSON serialization code for the IBbsArticle type.Such compile time optimization is called AOT (Ahead of Time) compilation. And this is the secret why nestia can do everything with only pure TypeScript type. Read below example codes, and just look how JavaScript file being compiled. Then you may understand why nestia is much easier, and futhermore much faster.\nRuntime validator is 20,000x faster than class-validator\nJSON serialization is 200x faster than class-transformer\nimport { tags } from \"typia\";\nexport interface IBbsArticle extends IBbsArticle.ICreate {\n  id: string & tags.Format<\"uuid\">;\n  created_at: string & tags.Format<\"date-time\">;\n}\nexport namespace IBbsArticle {\n  export interface ICreate {\n    title: string & tags.MinLength<3> & tags.MaxLength<50>;\n    body: string;\n    files: IAttachmentFile[];\n  }\n}\nexport interface IAttachmentFile {\n  name: null | (string & tags.MinLength<1> & tags.MaxLength<255>);\n  extension: null | (string & tags.MinLength<1> & tags.MaxLength<8>);\n  url: string | (string & tags.Format<\"url\">);\n}\nimport { TypedBody, TypedRoute } from \"@nestia/core\";\nimport { Controller } from \"@nestjs/common\";\nimport { IBbsArticle } from \"./IBbsArticle\";\n@Controller(\"bbs/articles\")\nexport class BbsArticlesController {\n  @TypedRoute.Post() // 200x faster JSON serialization\n  public async store(\n    // 20,000x faster validation\n    @TypedBody() input: IBbsArticle.ICreate,\n  ): Promise<IBbsArticle> {\n    return {\n      ...input,\n      id: \"2b5e21d8-0e44-4482-bd3e-4540dee7f3d6\",\n      created_at: \"2023-04-23T12:04:54.168Z\",\n    };\n  }\n}\n\"use strict\";\n\"use strict\";\nvar __decorate =\n  (this && this.__decorate) ||\n  function (decorators, target, key, desc) {\n    var c = arguments.length,\n      r =\n        c < 3\n          ? target\n          : desc === null\n          ? (desc = Object.getOwnPropertyDescriptor(target, key))\n          : desc,\n      d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n      r = Reflect.decorate(decorators, target, key, desc);\n    else\n      for (var i = decorators.length - 1; i >= 0; i--)\n        if ((d = decorators[i]))\n          r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n  };\nvar __metadata =\n  (this && this.__metadata) ||\n  function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n      return Reflect.metadata(k, v);\n  };\nvar __param =\n  (this && this.__param) ||\n  function (paramIndex, decorator) {\n    return function (target, key) {\n      decorator(target, key, paramIndex);\n    };\n  };\nvar __awaiter =\n  (this && this.__awaiter) ||\n  function (thisArg, _arguments, P, generator) {\n    function adopt(value) {\n      return value instanceof P\n        ? value\n        : new P(function (resolve) {\n            resolve(value);\n          });\n    }\n    return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) {\n        try {\n          step(generator.next(value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function rejected(value) {\n        try {\n          step(generator[\"throw\"](value));\n        } catch (e) {\n          reject(e);\n        }\n      }\n      function step(result) {\n        result.done\n          ? resolve(result.value)\n          : adopt(result.value).then(fulfilled, rejected);\n      }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n  };\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BbsArticlesController = void 0;\nconst core_1 = require(\"@nestia/core\");\nconst common_1 = require(\"@nestjs/common\");\nlet BbsArticlesController = class BbsArticlesController {\n  store(\n    // 20,000x faster validation\n    input,\n  ) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Object.assign(Object.assign({}, input), {\n        id: \"2b5e21d8-0e44-4482-bd3e-4540dee7f3d6\",\n        created_at: \"2023-04-23T12:04:54.168Z\",\n      });\n    });\n  }\n};\nexports.BbsArticlesController = BbsArticlesController;\n__decorate(\n  [\n    core_1.TypedRoute.Post({\n      type: \"assert\",\n      assert: (input) => {\n        const assert = (input) => {\n          const __is = (input) => {\n            const $io0 = (input) =>\n              \"string\" === typeof input.id &&\n              /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n                input.id,\n              ) &&\n              \"string\" === typeof input.created_at &&\n              !isNaN(new Date(input.created_at).getTime()) &&\n              \"string\" === typeof input.title &&\n              3 <= input.title.length &&\n              input.title.length <= 50 &&\n              \"string\" === typeof input.body &&\n              Array.isArray(input.files) &&\n              input.files.every(\n                (elem) =>\n                  \"object\" === typeof elem && null !== elem && $io1(elem),\n              );\n            const $io1 = (input) =>\n              (null === input.name ||\n                (\"string\" === typeof input.name &&\n                  1 <= input.name.length &&\n                  input.name.length <= 255)) &&\n              (null === input.extension ||\n                (\"string\" === typeof input.extension &&\n                  1 <= input.extension.length &&\n                  input.extension.length <= 8)) &&\n              \"string\" === typeof input.url &&\n              /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n                input.url,\n              );\n            return \"object\" === typeof input && null !== input && $io0(input);\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.TypedRoute.Post.guard;\n              const $ao0 = (input, _path, _exceptionable = true) =>\n                ((\"string\" === typeof input.id &&\n                  (/^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i.test(\n                    input.id,\n                  ) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".id\",\n                      expected: 'string & Format<\"uuid\">',\n                      value: input.id,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".id\",\n                    expected: '(string & Format<\"uuid\">)',\n                    value: input.id,\n                  })) &&\n                ((\"string\" === typeof input.created_at &&\n                  (!isNaN(new Date(input.created_at).getTime()) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".created_at\",\n                      expected: 'string & Format<\"date-time\">',\n                      value: input.created_at,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".created_at\",\n                    expected: '(string & Format<\"date-time\">)',\n                    value: input.created_at,\n                  })) &&\n                ((\"string\" === typeof input.title &&\n                  (3 <= input.title.length ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MinLength<3>\",\n                      value: input.title,\n                    })) &&\n                  (input.title.length <= 50 ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MaxLength<50>\",\n                      value: input.title,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".title\",\n                    expected: \"(string & MinLength<3> & MaxLength<50>)\",\n                    value: input.title,\n                  })) &&\n                (\"string\" === typeof input.body ||\n                  $guard(_exceptionable, {\n                    path: _path + \".body\",\n                    expected: \"string\",\n                    value: input.body,\n                  })) &&\n                (((Array.isArray(input.files) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files\",\n                    expected: \"Array<IAttachmentFile>\",\n                    value: input.files,\n                  })) &&\n                  input.files.every(\n                    (elem, _index1) =>\n                      (((\"object\" === typeof elem && null !== elem) ||\n                        $guard(_exceptionable, {\n                          path: _path + \".files[\" + _index1 + \"]\",\n                          expected: \"IAttachmentFile\",\n                          value: elem,\n                        })) &&\n                        $ao1(\n                          elem,\n                          _path + \".files[\" + _index1 + \"]\",\n                          true && _exceptionable,\n                        )) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".files[\" + _index1 + \"]\",\n                        expected: \"IAttachmentFile\",\n                        value: elem,\n                      }),\n                  )) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files\",\n                    expected: \"Array<IAttachmentFile>\",\n                    value: input.files,\n                  }));\n              const $ao1 = (input, _path, _exceptionable = true) =>\n                (null === input.name ||\n                  (\"string\" === typeof input.name &&\n                    (1 <= input.name.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".name\",\n                        expected: \"string & MinLength<1>\",\n                        value: input.name,\n                      })) &&\n                    (input.name.length <= 255 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".name\",\n                        expected: \"string & MaxLength<255>\",\n                        value: input.name,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".name\",\n                    expected:\n                      \"((string & MinLength<1> & MaxLength<255>) | null)\",\n                    value: input.name,\n                  })) &&\n                (null === input.extension ||\n                  (\"string\" === typeof input.extension &&\n                    (1 <= input.extension.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".extension\",\n                        expected: \"string & MinLength<1>\",\n                        value: input.extension,\n                      })) &&\n                    (input.extension.length <= 8 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".extension\",\n                        expected: \"string & MaxLength<8>\",\n                        value: input.extension,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".extension\",\n                    expected: \"((string & MinLength<1> & MaxLength<8>) | null)\",\n                    value: input.extension,\n                  })) &&\n                ((\"string\" === typeof input.url &&\n                  (/^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n                    input.url,\n                  ) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".url\",\n                      expected: 'string & Format<\"url\">',\n                      value: input.url,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".url\",\n                    expected: '(string & Format<\"url\">)',\n                    value: input.url,\n                  }));\n              return (\n                (((\"object\" === typeof input && null !== input) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IBbsArticle\",\n                    value: input,\n                  })) &&\n                  $ao0(input, _path + \"\", true)) ||\n                $guard(true, {\n                  path: _path + \"\",\n                  expected: \"IBbsArticle\",\n                  value: input,\n                })\n              );\n            })(input, \"$input\", true);\n          return input;\n        };\n        const stringify = (input) => {\n          const $io1 = (input) =>\n            (null === input.name ||\n              (\"string\" === typeof input.name &&\n                1 <= input.name.length &&\n                input.name.length <= 255)) &&\n            (null === input.extension ||\n              (\"string\" === typeof input.extension &&\n                1 <= input.extension.length &&\n                input.extension.length <= 8)) &&\n            \"string\" === typeof input.url &&\n            /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n              input.url,\n            );\n          const $string = core_1.TypedRoute.Post.string;\n          const $so0 = (input) =>\n            `{\"id\":${$string(input.id)},\"created_at\":${$string(\n              input.created_at,\n            )},\"title\":${$string(input.title)},\"body\":${$string(\n              input.body,\n            )},\"files\":${`[${input.files\n              .map((elem) => $so1(elem))\n              .join(\",\")}]`}}`;\n          const $so1 = (input) =>\n            `{\"name\":${\n              null !== input.name ? $string(input.name) : \"null\"\n            },\"extension\":${\n              null !== input.extension ? $string(input.extension) : \"null\"\n            },\"url\":${$string(input.url)}}`;\n          return $so0(input);\n        };\n        return stringify(assert(input));\n      },\n    }), // 200x faster JSON serialization\n    __param(\n      0,\n      (0, core_1.TypedBody)({\n        type: \"assert\",\n        assert: (input) => {\n          const __is = (input) => {\n            const $io0 = (input) =>\n              \"string\" === typeof input.title &&\n              3 <= input.title.length &&\n              input.title.length <= 50 &&\n              \"string\" === typeof input.body &&\n              Array.isArray(input.files) &&\n              input.files.every(\n                (elem) =>\n                  \"object\" === typeof elem && null !== elem && $io1(elem),\n              );\n            const $io1 = (input) =>\n              (null === input.name ||\n                (\"string\" === typeof input.name &&\n                  1 <= input.name.length &&\n                  input.name.length <= 255)) &&\n              (null === input.extension ||\n                (\"string\" === typeof input.extension &&\n                  1 <= input.extension.length &&\n                  input.extension.length <= 8)) &&\n              \"string\" === typeof input.url &&\n              /^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n                input.url,\n              );\n            return \"object\" === typeof input && null !== input && $io0(input);\n          };\n          if (false === __is(input))\n            ((input, _path, _exceptionable = true) => {\n              const $guard = core_1.TypedBody.guard;\n              const $ao0 = (input, _path, _exceptionable = true) =>\n                ((\"string\" === typeof input.title &&\n                  (3 <= input.title.length ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MinLength<3>\",\n                      value: input.title,\n                    })) &&\n                  (input.title.length <= 50 ||\n                    $guard(_exceptionable, {\n                      path: _path + \".title\",\n                      expected: \"string & MaxLength<50>\",\n                      value: input.title,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".title\",\n                    expected: \"(string & MinLength<3> & MaxLength<50>)\",\n                    value: input.title,\n                  })) &&\n                (\"string\" === typeof input.body ||\n                  $guard(_exceptionable, {\n                    path: _path + \".body\",\n                    expected: \"string\",\n                    value: input.body,\n                  })) &&\n                (((Array.isArray(input.files) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files\",\n                    expected: \"Array<IAttachmentFile>\",\n                    value: input.files,\n                  })) &&\n                  input.files.every(\n                    (elem, _index1) =>\n                      (((\"object\" === typeof elem && null !== elem) ||\n                        $guard(_exceptionable, {\n                          path: _path + \".files[\" + _index1 + \"]\",\n                          expected: \"IAttachmentFile\",\n                          value: elem,\n                        })) &&\n                        $ao1(\n                          elem,\n                          _path + \".files[\" + _index1 + \"]\",\n                          true && _exceptionable,\n                        )) ||\n                      $guard(_exceptionable, {\n                        path: _path + \".files[\" + _index1 + \"]\",\n                        expected: \"IAttachmentFile\",\n                        value: elem,\n                      }),\n                  )) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".files\",\n                    expected: \"Array<IAttachmentFile>\",\n                    value: input.files,\n                  }));\n              const $ao1 = (input, _path, _exceptionable = true) =>\n                (null === input.name ||\n                  (\"string\" === typeof input.name &&\n                    (1 <= input.name.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".name\",\n                        expected: \"string & MinLength<1>\",\n                        value: input.name,\n                      })) &&\n                    (input.name.length <= 255 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".name\",\n                        expected: \"string & MaxLength<255>\",\n                        value: input.name,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".name\",\n                    expected:\n                      \"((string & MinLength<1> & MaxLength<255>) | null)\",\n                    value: input.name,\n                  })) &&\n                (null === input.extension ||\n                  (\"string\" === typeof input.extension &&\n                    (1 <= input.extension.length ||\n                      $guard(_exceptionable, {\n                        path: _path + \".extension\",\n                        expected: \"string & MinLength<1>\",\n                        value: input.extension,\n                      })) &&\n                    (input.extension.length <= 8 ||\n                      $guard(_exceptionable, {\n                        path: _path + \".extension\",\n                        expected: \"string & MaxLength<8>\",\n                        value: input.extension,\n                      }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".extension\",\n                    expected: \"((string & MinLength<1> & MaxLength<8>) | null)\",\n                    value: input.extension,\n                  })) &&\n                ((\"string\" === typeof input.url &&\n                  (/^(?:https?|ftp):\\/\\/(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)(?:\\.(?:[a-z0-9\\u{00a1}-\\u{ffff}]+-)*[a-z0-9\\u{00a1}-\\u{ffff}]+)*(?:\\.(?:[a-z\\u{00a1}-\\u{ffff}]{2,})))(?::\\d{2,5})?(?:\\/[^\\s]*)?$/iu.test(\n                    input.url,\n                  ) ||\n                    $guard(_exceptionable, {\n                      path: _path + \".url\",\n                      expected: 'string & Format<\"url\">',\n                      value: input.url,\n                    }))) ||\n                  $guard(_exceptionable, {\n                    path: _path + \".url\",\n                    expected: '(string & Format<\"url\">)',\n                    value: input.url,\n                  }));\n              return (\n                (((\"object\" === typeof input && null !== input) ||\n                  $guard(true, {\n                    path: _path + \"\",\n                    expected: \"IBbsArticle.ICreate\",\n                    value: input,\n                  })) &&\n                  $ao0(input, _path + \"\", true)) ||\n                $guard(true, {\n                  path: _path + \"\",\n                  expected: \"IBbsArticle.ICreate\",\n                  value: input,\n                })\n              );\n            })(input, \"$input\", true);\n          return input;\n        },\n      }),\n    ),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [Object]),\n    __metadata(\"design:returntype\", Promise),\n  ],\n  BbsArticlesController.prototype,\n  \"store\",\n  null,\n);\nexports.BbsArticlesController = BbsArticlesController = __decorate(\n  [(0, common_1.Controller)(\"bbs/articles\")],\n  BbsArticlesController,\n);\n//# sourceMappingURL=BbsArticlesController.js.map\nMeasured on Intel i5-1135g7, Surface Pro 8"}},"/docs/sdk/e2e":{"title":"E2e","data":{"outline#Outline":"import { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\n// import { FastifyAdaptor } from \"@nestjs/platform-fastify\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule);\n    // const app = await NestFactory.create(YourModule, new FastifyAdaptor());\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  output: \"src/api\",\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nnpx nestia e2e\nnpx nestia e2e --config nestia.config.ts --project tsconfig.json\nConfigure nestia.config.ts file and run npx nestia e2e command.Then, @nestia/sdk will analyze your NestJS backend server code, and generate both SDK (Software Development Kit) library for client developers. Also, E2E test functions, utilizing the SDK library, will be automatically generated for correspnding to every API functions.Here is an example of generated E2E test functions:\nimport typia, { Primitive } from \"typia\";\nimport api from \"../../../../src/api\";\nimport type { IBbsArticle } from \"../../../../src/api/structures/IBbsArticle\";\nexport const test_api_body_store = async (\n  connection: api.IConnection,\n): Promise<void> => {\n  const output = await api.functional.body.store(\n    connection,\n    typia.random<Primitive<IBbsArticle.IStore>>(),\n  );\n  typia.assert(output);\n};\nLeft is server code, and right is e2e test code utilizing SDK library","configuration#Configuration":"import { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\n// import { FastifyAdaptor } from \"@nestjs/platform-fastify\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule);\n    // const app = await NestFactory.create(YourModule, new FastifyAdaptor());\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  output: \"src/api\",\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nimport type { INestApplication } from \"@nestjs/common\";\nimport type { ISwagger } from \"./structures/ISwagger\";\nimport type { ISwaggerInfo } from \"./structures/ISwaggerInfo\";\nimport type { ISwaggerSecurityScheme } from \"./structures/ISwaggerSecurityScheme\";\n/**\n * Definition for the `nestia.config.ts` file.\n *\n * @author Jeongho Nam - https://github.com/samchon\n */\nexport interface INestiaConfig {\n  /**\n   * Accessor of controller classes.\n   *\n   * You can specify it within two ways\n   *\n   *   - Asynchronous function returning `INestApplication` instance\n   *   - Specify the path or directory of controller class files\n   */\n  input:\n    | (() => Promise<INestApplication>)\n    | INestiaConfig.IInput\n    | string[]\n    | string;\n  /**\n   * Output directory that SDK would be placed in.\n   *\n   * If not configured, you can't build the SDK library.\n   */\n  output?: string;\n  /**\n   * Building `swagger.json` is also possible.\n   *\n   * If not specified, you can't build the `swagger.json`.\n   */\n  swagger?: INestiaConfig.ISwaggerConfig;\n  /**\n   * Target directory that SDK distribution files would be placed in.\n   *\n   * If you configure this property and runs `npx nestia sdk` command,\n   * distribution environments for the SDK library would be generated.\n   *\n   * After the SDK library generation, move to the `distribute` directory,\n   * and runs `npm publish` command, then you can share SDK library with\n   * other client (frontend) developers.\n   *\n   * Recommend to use `\"packages/api\"` value.\n   */\n  distribute?: string;\n  /**\n   * Allow simulation mode.\n   *\n   * If you configure this property to be `true`, the SDK library would be contain\n   * simulation mode. In the simulation mode, the SDK library would not communicate\n   * with the real backend server, but just returns random mock-up data\n   * with requestion data validation.\n   *\n   * For reference, random mock-up data would be generated by `typia.random<T>()`\n   * function.\n   *\n   * @default false\n   */\n  simulate?: boolean;\n  /**\n   * Target directory that e2e test functions would be placed in.\n   *\n   * If you configure this property and runs `npx nestia e2e` command,\n   * `@nestia/sdk` will analyze your NestJS backend server code, and\n   * generates e2e test functions for every API endpoints.\n   *\n   * If not configured, you can't run `npx nestia e2e` command.\n   */\n  e2e?: string;\n  /**\n   * Whether to use propagation mode or not.\n   *\n   * If being configured, interaction functions of the SDK library would\n   * perform the propagation mode. The propagation mode means that never\n   * throwing exception even when status code is not 200 (or 201), but just\n   * returning the {@link IPropagation} typed instance, which can specify its body\n   * type through discriminated union determined by status code.\n   *\n   * @default false\n   */\n  propagate?: boolean;\n  /**\n   * Whether to clone DTO structures or not.\n   *\n   * If being configured, all of DTOs used in the backend server would be cloned\n   * into the `structures` directory, and the SDK library would be refer to the\n   * cloned DTOs instead of the original.\n   *\n   * @default false\n   */\n  clone?: boolean;\n  /**\n   * Whether to wrap DTO by primitive type.\n   *\n   * If you don't configure this property as `false`, all of DTOs in the\n   * SDK library would be automatically wrapped by {@link Primitive} type.\n   *\n   * For refenrece, if a DTO type be capsuled by the {@link Primitive} type,\n   * all of methods in the DTO type would be automatically erased. Also, if\n   * the DTO has a `toJSON()` method, the DTO type would be automatically\n   * converted to return type of the `toJSON()` method.\n   *\n   * @default true\n   */\n  primitive?: boolean;\n  /**\n   * Whether to assert parameter types or not.\n   *\n   * If you configure this property to be `true`, all of the function\n   * parameters of SDK library would be checked through\n   * [`typia.assert<T>()` function](https://typia.io/docs/validators/assert/).\n   *\n   * This option would make your SDK library compilation time a little bit slower,\n   * but would enahcne the type safety even in the runtime level.\n   *\n   * @default false\n   */\n  assert?: boolean;\n  /**\n   * Whether to optimize JSON string conversion 10x faster or not.\n   *\n   * If you configure this property to be `true`, the SDK library would utilize the\n   * [`typia.assertStringify<T>() function`](https://github.com/samchon/typia#enhanced-json)\n   * to boost up JSON serialization speed and ensure type safety.\n   *\n   * This option would make your SDK library compilation time a little bit slower,\n   * but would enhance JSON serialization speed 10x faster. Also, it can ensure type\n   * safety even in the rumtime level.\n   *\n   * @default false\n   */\n  json?: boolean;\n}\nexport namespace INestiaConfig {\n  /**\n   * List of files or directories to include or exclude to specifying the NestJS\n   * controllers.\n   */\n  export interface IInput {\n    /**\n     * List of files or directories containing the NestJS controller classes.\n     */\n    include: string[];\n    /**\n     * List of files or directories to be excluded.\n     */\n    exclude?: string[];\n  }\n  /**\n   * Building `swagger.json` is also possible.\n   */\n  export interface ISwaggerConfig {\n    /**\n     * Output path of the `swagger.json`.\n     *\n     * If you've configured only directory, the file name would be the `swagger.json`.\n     * Otherwise you've configured the full path with file name and extension, the\n     * `swagger.json` file would be renamed to it.\n     */\n    output: string;\n    /**\n     * API information.\n     *\n     * If omitted, `package.json` content would be used instead.\n     */\n    info?: Partial<ISwaggerInfo>;\n    /**\n     * List of server addresses.\n     */\n    servers?: ISwagger.IServer[];\n    /**\n     * Security schemes.\n     *\n     * When generating `swagger.json` file through `nestia`, if your controllers or\n     * theirs methods have a security key which is not enrolled in here property,\n     * it would be an error.\n     */\n    security?: Record<string, ISwaggerSecurityScheme>;\n    /**\n     * Decompose query DTO.\n     *\n     * If you configure this property to be `true`, the query DTO would be decomposed\n     * into individual query parameters per each property.\n     *\n     * @default false\n     */\n    decompose?: boolean;\n    operationId?(props: {\n      class: string;\n      function: string;\n      method: \"HEAD\" | \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n      path: string;\n    }): string;\n  }\n}\nMake nestia.config.ts file and run npx nestia e2e command.At first, create nestia.config.ts file through npx nestia init command. It would be placed on the top level directory of your NestJS backend project. For reference, tsconfig.json file also must be placed in the top level directory, too. After creation, configure the nestia.config.ts file referencing above example code and type definition.At least, you've to configure those three properties:\ninput: Accessor of controller classes\noutput: Path of output directory for SDK library\ne2e: Path of output directory for E2E test functions\nWhen you've completed above configuration, just run npx nestia e2e command. Then, SDK library would be generated into the $config.output directory, and E2E test functions would be generated into the $config.e2e directory, following your nestia.config.ts option.By the way, nestia.config.ts supports alternative options specifying the target controller classes instead of using the Module instance. If your backend application server does not have special configuration like setGlobalPrefix, enableVersioning and RouterModule, it is okay to specifying the target controller classes just by writing their file path like below.\nimport { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule);\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  output: \"src/api\",\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\nimport { FastifyAdaptor } from \"@nestjs/platform-fastify\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule, new FastifyAdaptor());\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  output: \"src/api\",\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: [\"src/controllers\", \"src/fake/controllers\", \"src/test/controllers\"],\n  output: \"src/api\",\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: \"src/**/*.controller.ts\",\n  output: \"src/api\",\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: {\n    include: [\"src/controllers\"],\n    exclude: [\"src/**/*.fake.ts\"],\n  },\n  output: \"src/api\",\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;","customization#Customization":"import core from \"@nestia/core\";\nimport { DynamicExecutor } from \"@nestia/e2e\";\nimport { INestApplication } from \"@nestjs/common\";\nimport { NestFactory } from \"@nestjs/core\";\nasync function main(): Promise<void> {\n  const server: INestApplication = await NestFactory.create(\n    await core.DynamicModule.mount({\n      // follows your nestia.config.ts setting\n      controllers: {\n        input: [\"src/controllers\"],\n        exclude: [\"src/**/*.fake.ts\"],\n      },\n    }),\n  );\n  await server.listen(37_000);\n  const report: DynamicExecutor.IReport = await DynamicExecutor.validate({\n    prefix: \"test\",\n    parameters: () => [\n      {\n        host: \"http://127.0.0.1:37000\",\n      },\n    ],\n  })(`${__dirname}/features`);\n  await server.close();\n  const exceptions: Error[] = report.executions\n    .filter((exec) => exec.error !== null)\n    .map((exec) => exec.error!);\n  if (exceptions.length === 0) {\n    console.log(\"Success\");\n    console.log(\"Elapsed time\", report.time.toLocaleString(), `ms`);\n  } else {\n    for (const exp of exceptions) console.log(exp);\n    console.log(\"Failed\");\n    console.log(\"Elapsed time\", report.time.toLocaleString(), `ms`);\n    process.exit(-1);\n  }\n}\nmain().catch((exp) => {\n  console.log(exp);\n  process.exit(-1);\n});\nNothing be specified, customize by yourself.When you generate e2e test functions through npx nestia e2e command, such index.ts file would be placed into the top level directory of test program. As you can see, the initial e2e test program only opens your NestJS backend server only with path of controllers with port number 37,000.However, it may not fully meet your requirements. For example, you may connect to a database server, and also need to configure DI (Dependency Injection) classes, too. You've to configure those things by yourself. @nestia/sdk can analyzes your backend server in the compilation level, but unable to reproduce such customizations.\nimport { Controller } from \"@nestjs/common\";\nimport typia, { tags } from \"typia\";\nimport core from \"@nestia/core\";\nimport { IBbsArticle } from \"@api/lib/structures/IBbsArticle\";\n@Controller(\"bbs/articles/:section\")\nexport class BbsArticlesController {\n  /**\n   * Store a new article.\n   *\n   * @param section Section code\n   * @param input Content to store\n   * @returns Newly archived article\n   */\n  @core.TypedRoute.Post()\n  public async store(\n    @core.TypedParam(\"section\") section: string,\n    @core.TypedBody() input: IBbsArticle.IStore,\n  ): Promise<IBbsArticle> {\n    return {\n      ...typia.random<IBbsArticle>(),\n      section,\n      ...input,\n    };\n  }\n  /**\n   * Update an article.\n   *\n   * @param section Section code\n   * @param id Target article ID\n   * @param input Content to update\n   * @returns Updated content\n   */\n  @core.TypedRoute.Put(\":id\")\n  public async update(\n    @core.TypedParam(\"section\") section: string,\n    @core.TypedParam(\"id\") id: string & tags.Format<\"uuid\">,\n    @core.TypedBody() input: IBbsArticle.IStore,\n  ): Promise<IBbsArticle> {\n    return {\n      ...typia.random<IBbsArticle>(),\n      id,\n      section,\n      ...input,\n    };\n  }\n}\n/**\n * @packageDocumentation\n * @module api.functional.bbs.articles\n * @nestia Generated by Nestia - https://github.com/samchon/nestia\n */\n//================================================================\nimport type { IConnection, Primitive } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport type { Format } from \"typia/lib/tags/Format\";\nimport type { IBbsArticle } from \"../../../structures/IBbsArticle\";\n/**\n * Store a new article.\n *\n * @param section Section code\n * @param input Content to store\n * @returns Newly archived article\n *\n * @controller [object Object]\n * @path POST /bbs/articles/:section\n * @nestia Generated by Nestia - https://github.com/samchon/nestia\n */\nexport async function store(\n  connection: IConnection,\n  section: string,\n  input: store.Input,\n): Promise<store.Output> {\n  return PlainFetcher.fetch(\n    {\n      ...connection,\n      headers: {\n        ...connection.headers,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    {\n      ...store.METADATA,\n      path: store.path(section),\n    } as const,\n    input,\n  );\n}\nexport namespace store {\n  export type Input = Primitive<IBbsArticle.IStore>;\n  export type Output = Primitive<IBbsArticle>;\n  export const METADATA = {\n    method: \"POST\",\n    path: \"/bbs/articles/:section\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    status: null,\n  } as const;\n  export const path = (section: string): string => {\n    return `/bbs/articles/${encodeURIComponent(section ?? \"null\")}`;\n  };\n}\n/**\n * Update an article.\n *\n * @param section Section code\n * @param id Target article ID\n * @param input Content to update\n * @returns Updated content\n *\n * @controller [object Object]\n * @path PUT /bbs/articles/:section/:id\n * @nestia Generated by Nestia - https://github.com/samchon/nestia\n */\nexport async function update(\n  connection: IConnection,\n  section: string,\n  id: string & Format<\"uuid\">,\n  input: update.Input,\n): Promise<update.Output> {\n  return PlainFetcher.fetch(\n    {\n      ...connection,\n      headers: {\n        ...connection.headers,\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    {\n      ...update.METADATA,\n      path: update.path(section, id),\n    } as const,\n    input,\n  );\n}\nexport namespace update {\n  export type Input = Primitive<IBbsArticle.IStore>;\n  export type Output = Primitive<IBbsArticle>;\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/bbs/articles/:section/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    status: null,\n  } as const;\n  export const path = (\n    section: string,\n    id: string & Format<\"uuid\">,\n  ): string => {\n    return `/bbs/articles/${encodeURIComponent(\n      section ?? \"null\",\n    )}/${encodeURIComponent(id ?? \"null\")}`;\n  };\n}\nimport type { IConnection, Primitive } from \"@nestia/fetcher\";\nimport { PlainFetcher } from \"@nestia/fetcher/lib/PlainFetcher\";\nimport type { Format } from \"typia/lib/tags/Format\";\nimport api from \"../../../../src/api\";\nimport type { IBbsArticle } from \"../../../../src/api/structures/IBbsArticle\";\nexport const test_api_bbs_articles_update = async (\n  connection: api.IConnection,\n): Promise<void> => {\n  const output = await api.functional.bbs.articles.update(\n    connection,\n    typia.random<string>(),\n    typia.random<string & Format<\"uuid\">>(),\n    typia.random<Primitive<IBbsArticle.IStore>>(),\n  );\n  typia.assert(output);\n};\nYou also need to customize each e2e test functions.When you run npx nestia e2e command, every e2e functions would be placed into $config.e2e/features/api/automated directory. Also, automatically generated e2e test functions are composing parameters through typia.random<T>() function.If your NestJS backend server development has not been completed, and your API functions are in the mock-up level, such random parameter composition would not be problem. Otherwise your API functions are enoughly completed, such random parameter composition may occur logic error.Therefore, you also need to customize automatically generated e2e test functions. Move each e2e test files from the $config.e2e/features/api/automated directory to somewhere else, and customize those e2e test functions to be suitable for your domain logics."}},"/docs/sdk/simulator":{"title":"Simulator","data":{"outline#Outline":"import { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\n// import { FastifyAdaptor } from \"@nestjs/platform-fastify\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule);\n    // const app = await NestFactory.create(YourModule, new FastifyAdaptor());\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n      //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  output: \"src/api\",\n  simulate: true, // supports simulation mode\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nnpx nestia sdk\nnpx nestia sdk --config nestia.config.ts --project tsconfig.json\n/**\n * Update an article.\n *\n * @param section Section code\n * @param id Target article ID\n * @param input Content to update\n * @returns Updated content\n *\n * @controller BbsArticlesController.update()\n * @path PUT /bbs/:section/articles/:id\n * @nestia Generated by Nestia - https://github.com/samchon/nestia\n */\nexport async function update(\n  connection: IConnection,\n  section: string,\n  id: string & Format<\"uuid\">,\n  input: update.Input,\n): Promise<update.Output> {\n  return !!connection.simulate\n    ? update.simulate(connection, section, id, input)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...update.METADATA,\n          path: update.path(section, id),\n        } as const,\n        input,\n      );\n}\nexport namespace update {\n  export type Input = Primitive<IBbsArticle.IStore>;\n  export type Output = Primitive<IBbsArticle>;\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/bbs/articles/:section/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    status: null,\n  } as const;\n  export const path = (\n    section: string,\n    id: string & Format<\"uuid\">,\n  ): string => {\n    return `/bbs/${encodeURIComponent(\n      section ?? \"null\",\n    )}/articles/${encodeURIComponent(id ?? \"null\")}`;\n  };\n  export const random = (g?: Partial<typia.IRandomGenerator>): Output =>\n    typia.random<Output>(g);\n  export const simulate = async (\n    connection: IConnection,\n    section: string,\n    id: string & Format<\"uuid\">,\n    input: update.Input,\n  ): Promise<Output> => {\n    const assert = NestiaSimulator.assert({\n      method: METHOD,\n      host: connection.host,\n      path: path(section, id),\n    });\n    assert.param(\"section\")(\"string\")(() => typia.assert(section));\n    assert.param(\"id\")(\"uuid\")(() => typia.assert(id));\n    assert.body(() => typia.assert(input));\n    return random(\n      typeof connection.simulate === \"object\" && connection.simulate !== null\n        ? connection.simulate\n        : undefined,\n    );\n  };\n}\nNestia SDK library supports Mockup simulator.When generating SDK library, if you configure simulate property of nestia.config.file to be true, newly generated SDK library will support mockup simulation mode for frontend developers. With the mockup simulator, frontend developers can simulate NestJS backend server with internal mock functions, instead of connecting to the real backend server.Therefore, with the mockup simulator, frontend development can be started even when the backend server is not ready yet. Mockup simulator of Nestia SDK will replace the real backend server, validating request data, and returning mockup data as response.Within framework of backend developers, they also do not need to be suffered from the mock-up data composition. Also, as nestia can automatically generate e2e test functions, backend developers can concentrated only on the business logic.","confguration#Confguration":"import { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\n// import { FastifyAdaptor } from \"@nestjs/platform-fastify\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule);\n    // const app = await NestFactory.create(YourModule, new FastifyAdaptor());\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  output: \"src/api\",\n  simulate: true, // supports simulation mode\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nimport type { INestApplication } from \"@nestjs/common\";\nimport type { ISwagger } from \"./structures/ISwagger\";\nimport type { ISwaggerInfo } from \"./structures/ISwaggerInfo\";\nimport type { ISwaggerSecurityScheme } from \"./structures/ISwaggerSecurityScheme\";\n/**\n * Definition for the `nestia.config.ts` file.\n *\n * @author Jeongho Nam - https://github.com/samchon\n */\nexport interface INestiaConfig {\n  /**\n   * Accessor of controller classes.\n   *\n   * You can specify it within two ways\n   *\n   *   - Asynchronous function returning `INestApplication` instance\n   *   - Specify the path or directory of controller class files\n   */\n  input:\n    | (() => Promise<INestApplication>)\n    | INestiaConfig.IInput\n    | string[]\n    | string;\n  /**\n   * Output directory that SDK would be placed in.\n   *\n   * If not configured, you can't build the SDK library.\n   */\n  output?: string;\n  /**\n   * Building `swagger.json` is also possible.\n   *\n   * If not specified, you can't build the `swagger.json`.\n   */\n  swagger?: INestiaConfig.ISwaggerConfig;\n  /**\n   * Target directory that SDK distribution files would be placed in.\n   *\n   * If you configure this property and runs `npx nestia sdk` command,\n   * distribution environments for the SDK library would be generated.\n   *\n   * After the SDK library generation, move to the `distribute` directory,\n   * and runs `npm publish` command, then you can share SDK library with\n   * other client (frontend) developers.\n   *\n   * Recommend to use `\"packages/api\"` value.\n   */\n  distribute?: string;\n  /**\n   * Allow simulation mode.\n   *\n   * If you configure this property to be `true`, the SDK library would be contain\n   * simulation mode. In the simulation mode, the SDK library would not communicate\n   * with the real backend server, but just returns random mock-up data\n   * with requestion data validation.\n   *\n   * For reference, random mock-up data would be generated by `typia.random<T>()`\n   * function.\n   *\n   * @default false\n   */\n  simulate?: boolean;\n  /**\n   * Target directory that e2e test functions would be placed in.\n   *\n   * If you configure this property and runs `npx nestia e2e` command,\n   * `@nestia/sdk` will analyze your NestJS backend server code, and\n   * generates e2e test functions for every API endpoints.\n   *\n   * If not configured, you can't run `npx nestia e2e` command.\n   */\n  e2e?: string;\n  /**\n   * Whether to use propagation mode or not.\n   *\n   * If being configured, interaction functions of the SDK library would\n   * perform the propagation mode. The propagation mode means that never\n   * throwing exception even when status code is not 200 (or 201), but just\n   * returning the {@link IPropagation} typed instance, which can specify its body\n   * type through discriminated union determined by status code.\n   *\n   * @default false\n   */\n  propagate?: boolean;\n  /**\n   * Whether to clone DTO structures or not.\n   *\n   * If being configured, all of DTOs used in the backend server would be cloned\n   * into the `structures` directory, and the SDK library would be refer to the\n   * cloned DTOs instead of the original.\n   *\n   * @default false\n   */\n  clone?: boolean;\n  /**\n   * Whether to wrap DTO by primitive type.\n   *\n   * If you don't configure this property as `false`, all of DTOs in the\n   * SDK library would be automatically wrapped by {@link Primitive} type.\n   *\n   * For refenrece, if a DTO type be capsuled by the {@link Primitive} type,\n   * all of methods in the DTO type would be automatically erased. Also, if\n   * the DTO has a `toJSON()` method, the DTO type would be automatically\n   * converted to return type of the `toJSON()` method.\n   *\n   * @default true\n   */\n  primitive?: boolean;\n  /**\n   * Whether to assert parameter types or not.\n   *\n   * If you configure this property to be `true`, all of the function\n   * parameters of SDK library would be checked through\n   * [`typia.assert<T>()` function](https://typia.io/docs/validators/assert/).\n   *\n   * This option would make your SDK library compilation time a little bit slower,\n   * but would enahcne the type safety even in the runtime level.\n   *\n   * @default false\n   */\n  assert?: boolean;\n  /**\n   * Whether to optimize JSON string conversion 10x faster or not.\n   *\n   * If you configure this property to be `true`, the SDK library would utilize the\n   * [`typia.assertStringify<T>() function`](https://github.com/samchon/typia#enhanced-json)\n   * to boost up JSON serialization speed and ensure type safety.\n   *\n   * This option would make your SDK library compilation time a little bit slower,\n   * but would enhance JSON serialization speed 10x faster. Also, it can ensure type\n   * safety even in the rumtime level.\n   *\n   * @default false\n   */\n  json?: boolean;\n}\nexport namespace INestiaConfig {\n  /**\n   * List of files or directories to include or exclude to specifying the NestJS\n   * controllers.\n   */\n  export interface IInput {\n    /**\n     * List of files or directories containing the NestJS controller classes.\n     */\n    include: string[];\n    /**\n     * List of files or directories to be excluded.\n     */\n    exclude?: string[];\n  }\n  /**\n   * Building `swagger.json` is also possible.\n   */\n  export interface ISwaggerConfig {\n    /**\n     * Output path of the `swagger.json`.\n     *\n     * If you've configured only directory, the file name would be the `swagger.json`.\n     * Otherwise you've configured the full path with file name and extension, the\n     * `swagger.json` file would be renamed to it.\n     */\n    output: string;\n    /**\n     * API information.\n     *\n     * If omitted, `package.json` content would be used instead.\n     */\n    info?: Partial<ISwaggerInfo>;\n    /**\n     * List of server addresses.\n     */\n    servers?: ISwagger.IServer[];\n    /**\n     * Security schemes.\n     *\n     * When generating `swagger.json` file through `nestia`, if your controllers or\n     * theirs methods have a security key which is not enrolled in here property,\n     * it would be an error.\n     */\n    security?: Record<string, ISwaggerSecurityScheme>;\n    /**\n     * Decompose query DTO.\n     *\n     * If you configure this property to be `true`, the query DTO would be decomposed\n     * into individual query parameters per each property.\n     *\n     * @default false\n     */\n    decompose?: boolean;\n    operationId?(props: {\n      class: string;\n      function: string;\n      method: \"HEAD\" | \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n      path: string;\n    }): string;\n  }\n}\nMake nestia.config.ts file and run npx nestia sdk command.At first, create nestia.config.ts file through npx nestia init command. It would be placed on the top level directory of your NestJS backend project. For reference, tsconfig.json file also must be placed in the top level directory, too. After creation, configure the nestia.config.ts file referencing above example code and type definition.At least, you've to configure those three properties. Also, if you've decided to support mockup simulator for frontend developers, I recommend you to configure two properties more, for automatic e2e functions generation and SDK library distribution.\nEssential\ninput: Accessor of controller classes\noutput: Path of output directory for SDK library\nsimulate: Whether to support simulator or not\nRecommended\ne2e: Path of output directory for E2E test functions\ndistribute: Target directory for SDK library distribution\nWhen you've completed above configuration, just run npx nestia sdk command. Then, SDK library would be generated into the $config.output directory, with simulation mode supporting. If you want to generate e2e functions automatically, run npx nestia e2e command after.By the way, nestia.config.ts supports alternative options specifying the target controller classes instead of using the Module instance. If your backend application server does not have special configuration like setGlobalPrefix, enableVersioning and RouterModule, it is okay to specifying the target controller classes just by writing their file path like below.\nimport { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule);\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  output: \"src/api\",\n  simulate: true,\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\nimport { FastifyAdaptor } from \"@nestjs/platform-fastify\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule, new FastifyAdpator());\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  output: \"src/api\",\n  simulate: true,\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: [\"src/controllers\", \"src/fake/controllers\", \"src/test/controllers\"],\n  output: \"src/api\",\n  simulate: true,\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: \"src/**/*.controller.ts\",\n  output: \"src/api\",\n  simulate: true,\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: {\n    include: [\"src/controllers\"],\n    exclude: [\"src/**/*.fake.ts\"],\n  },\n  output: \"src/api\",\n  simulate: true,\n  distribute: \"packages/api\",\n  e2e: \"test\",\n};\nexport default NESTIA_CONFIG;","code-analysis#Code Analysis":"/**\n * Update an article.\n *\n * @param section Section code\n * @param id Target article ID\n * @param input Content to update\n * @returns Updated content\n *\n * @controller BbsArticlesController.update()\n * @path PUT /bbs/:section/articles/:id\n * @nestia Generated by Nestia - https://github.com/samchon/nestia\n */\nexport async function update(\n  connection: IConnection,\n  section: string,\n  id: string & Format<\"uuid\">,\n  input: update.Input,\n): Promise<update.Output> {\n  return !!connection.simulate\n    ? update.simulate(connection, section, id, input)\n    : PlainFetcher.fetch(\n        {\n          ...connection,\n          headers: {\n            ...connection.headers,\n            \"Content-Type\": \"application/json\",\n          },\n        },\n        {\n          ...update.METADATA,\n          path: update.path(section, id),\n        } as const,\n        input,\n      );\n}\nexport namespace update {\n  export type Input = Primitive<IBbsArticle.IStore>;\n  export type Output = Primitive<IBbsArticle>;\n  export const METADATA = {\n    method: \"PUT\",\n    path: \"/bbs/articles/:section/:id\",\n    request: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    response: {\n      type: \"application/json\",\n      encrypted: false,\n    },\n    status: null,\n  } as const;\n  export const path = (\n    section: string,\n    id: string & Format<\"uuid\">,\n  ): string => {\n    return `/bbs/${encodeURIComponent(\n      section ?? \"null\",\n    )}/articles/${encodeURIComponent(id ?? \"null\")}`;\n  };\n  export const random = (g?: Partial<typia.IRandomGenerator>): Output =>\n    typia.random<Output>(g);\n  export const simulate = async (\n    connection: IConnection,\n    section: string,\n    id: string & Format<\"uuid\">,\n    input: update.Input,\n  ): Promise<Output> => {\n    const assert = NestiaSimulator.assert({\n      method: METHOD,\n      host: connection.host,\n      path: path(section, id),\n    });\n    assert.param(\"section\")(() => typia.assert(section));\n    assert.param(\"id\")(() => typia.assert(id));\n    assert.body(() => typia.assert(input));\n    return random(\n      typeof connection.simulate === \"object\" && connection.simulate !== null\n        ? connection.simulate\n        : undefined,\n    );\n  };\n}\nimport { HttpError } from \"@nestia/fetcher\";\nimport typia from \"typia\";\nexport namespace NestiaSimulator {\n  export interface IProps {\n    host: string;\n    path: string;\n    method: \"GET\" | \"POST\" | \"PATCH\" | \"PUT\" | \"DELETE\";\n    contentType: string;\n  }\n  export const assert = (props: IProps) => {\n    return {\n      param: param(props),\n      query: query(props),\n      body: body(props),\n    };\n  };\n  const param =\n    (props: IProps) =>\n    (name: string) =>\n    <T>(task: () => T): void => {\n      validate((exp) => `URL parameter \"${name}\" is not ${exp.expected} type.`)(\n        props,\n      )(task);\n    };\n  const query =\n    (props: IProps) =>\n    <T>(task: () => T): void =>\n      validate(\n        () => \"Request query parameters are not following the promised type.\",\n      )(props)(task);\n  const body =\n    (props: IProps) =>\n    <T>(task: () => T): void =>\n      validate(() => \"Request body is not following the promised type.\")(props)(\n        task,\n      );\n  const validate =\n    (message: (exp: typia.TypeGuardError) => string, path?: string) =>\n    (props: IProps) =>\n    <T>(task: () => T): void => {\n      try {\n        task();\n      } catch (exp) {\n        if (typia.is<typia.TypeGuardError>(exp))\n          throw new HttpError(\n            props.method,\n            props.host + props.path,\n            400,\n            {\n              \"Content-Type\": props.contentType,\n            },\n            JSON.stringify({\n              method: exp.method,\n              path: path ?? exp.path,\n              expected: exp.expected,\n              value: exp.value,\n              message: message(exp),\n            }),\n          );\n        throw exp;\n      }\n    };\n}\nLet's read generated SDK library code, and understand which features are supportedAt first, you can find that mock-up data is composed by typia.random<T>() function. Also, simulator function validates path parameters and request body data through typia.assert<T>() function. If the validation fails, 400 status error would be thrown.At last, if frontend developer turns off simulation mode by configuring IConnection.simulate value to be false, the SDK library stops NestJS backend server simulating, and just start communicating with the real backend server."}},"/docs/sdk/swagger":{"title":"Swagger","data":{"outline#Outline":"import { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\n// import { FastifyAdaptor } from \"@nestjs/platform-fastify\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule);\n    // const app = await NestFactory.create(YourModule, new FastifyAdaptor());\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  swagger: {\n    output: \"dist/swagger.json\",\n    beautify: true,\n    security: {\n      bearer: {\n        type: \"apiKey\",\n        name: \"Authorization\",\n        in: \"header\",\n      },\n    },\n    servers: [\n      {\n        url: \"http://localhost:3000\",\n        description: \"Local Server\",\n      },\n    ],\n  },\n};\nexport default NESTIA_CONFIG;\nnpx nestia swagger\nnpx nestia swagger --config nestia.config.ts --project tsconfig.json\nConfigure nestia.config.ts file and run npx nestia swagger command.Then, @nestia/sdk will analyze your NestJS backend server code, and generate swagger.json file.If you have a special configuration file that its file name is not nestia.config.ts, you can specify it with --config option like npx nestia swagger --config another.config.ts. Also, if you have a special tsconfig.json file, you can specify it with --project option like npx nestia swagger --project another.tsconfig.json, too.","configuration#Configuration":"import { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\n// import { FastifyAdaptor } from \"@nestjs/platform-fastify\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule);\n    // const app = await NestFactory.create(YourModule, new FastifyAdaptor());\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  swagger: {\n    output: \"dist/swagger.json\",\n    security: {\n      bearer: {\n        type: \"apiKey\",\n        name: \"Authorization\",\n        in: \"header\",\n      },\n    },\n    servers: [\n      {\n        url: \"http://localhost:3000\",\n        description: \"Local Server\",\n      },\n    ],\n    beautify: true,\n  },\n};\nexport default NESTIA_CONFIG;\nimport type { INestApplication } from \"@nestjs/common\";\nimport type { ISwaggerInfo } from \"./structures/ISwaggerInfo\";\nimport type { ISwaggerSecurityScheme } from \"./structures/ISwaggerSecurityScheme\";\nimport type { ISwaggerServer } from \"./structures/ISwaggerServer\";\nimport type { ISwaggerTag } from \"./structures/ISwaggerTag\";\n/**\n * Definition for the `nestia.config.ts` file.\n *\n * @author Jeongho Nam - https://github.com/samchon\n */\nexport interface INestiaConfig {\n  /**\n   * Building `swagger.json` is also possible.\n   *\n   * If not specified, you can't build the `swagger.json`.\n   */\n  swagger?: INestiaConfig.ISwaggerConfig;\n  /**\n   * Accessor of controller classes.\n   *\n   * You can specify it within two ways\n   *\n   *   - Asynchronous function returning `INestApplication` instance\n   *   - Specify the path or directory of controller class files\n   */\n  input:\n    | (() => Promise<INestApplication>)\n    | INestiaConfig.IInput\n    | string[]\n    | string;\n  /**\n   * Output directory that SDK would be placed in.\n   *\n   * If not configured, you can't build the SDK library.\n   */\n  output?: string;\n  /**\n   * Target directory that SDK distribution files would be placed in.\n   *\n   * If you configure this property and runs `npx nestia sdk` command,\n   * distribution environments for the SDK library would be generated.\n   *\n   * After the SDK library generation, move to the `distribute` directory,\n   * and runs `npm publish` command, then you can share SDK library with\n   * other client (frontend) developers.\n   *\n   * Recommend to use `\"packages/api\"` value.\n   */\n  distribute?: string;\n  /**\n   * Allow simulation mode.\n   *\n   * If you configure this property to be `true`, the SDK library would be contain\n   * simulation mode. In the simulation mode, the SDK library would not communicate\n   * with the real backend server, but just returns random mock-up data\n   * with requestion data validation.\n   *\n   * For reference, random mock-up data would be generated by `typia.random<T>()`\n   * function.\n   *\n   * @default false\n   */\n  simulate?: boolean;\n  /**\n   * Target directory that e2e test functions would be placed in.\n   *\n   * If you configure this property and runs `npx nestia e2e` command,\n   * `@nestia/sdk` will analyze your NestJS backend server code, and\n   * generates e2e test functions for every API endpoints.\n   *\n   * If not configured, you can't run `npx nestia e2e` command.\n   */\n  e2e?: string;\n  /**\n   * Whether to use propagation mode or not.\n   *\n   * If being configured, interaction functions of the SDK library would\n   * perform the propagation mode. The propagation mode means that never\n   * throwing exception even when status code is not 200 (or 201), but just\n   * returning the {@link IPropagation} typed instance, which can specify its body\n   * type through discriminated union determined by status code.\n   *\n   * @default false\n   */\n  propagate?: boolean;\n  /**\n   * Whether to clone DTO structures or not.\n   *\n   * If being configured, all of DTOs used in the backend server would be cloned\n   * into the `structures` directory, and the SDK library would be refer to the\n   * cloned DTOs instead of the original.\n   *\n   * @default false\n   */\n  clone?: boolean;\n  /**\n   * Whether to wrap DTO by primitive type.\n   *\n   * If you don't configure this property as `false`, all of DTOs in the\n   * SDK library would be automatically wrapped by {@link Primitive} type.\n   *\n   * For refenrece, if a DTO type be capsuled by the {@link Primitive} type,\n   * all of methods in the DTO type would be automatically erased. Also, if\n   * the DTO has a `toJSON()` method, the DTO type would be automatically\n   * converted to return type of the `toJSON()` method.\n   *\n   * @default true\n   */\n  primitive?: boolean;\n  /**\n   * Whether to assert parameter types or not.\n   *\n   * If you configure this property to be `true`, all of the function\n   * parameters of SDK library would be checked through\n   * [`typia.assert<T>()` function](https://typia.io/docs/validators/assert/).\n   *\n   * This option would make your SDK library compilation time a little bit slower,\n   * but would enahcne the type safety even in the runtime level.\n   *\n   * @default false\n   */\n  assert?: boolean;\n  /**\n   * Whether to optimize JSON string conversion 10x faster or not.\n   *\n   * If you configure this property to be `true`, the SDK library would utilize the\n   * [`typia.assertStringify<T>() function`](https://github.com/samchon/typia#enhanced-json)\n   * to boost up JSON serialization speed and ensure type safety.\n   *\n   * This option would make your SDK library compilation time a little bit slower,\n   * but would enhance JSON serialization speed 10x faster. Also, it can ensure type\n   * safety even in the rumtime level.\n   *\n   * @default false\n   */\n  json?: boolean;\n}\nexport namespace INestiaConfig {\n  /**\n   * List of files or directories to include or exclude to specifying the NestJS\n   * controllers.\n   */\n  export interface IInput {\n    /**\n     * List of files or directories containing the NestJS controller classes.\n     */\n    include: string[];\n    /**\n     * List of files or directories to be excluded.\n     */\n    exclude?: string[];\n  }\n  /**\n   * Building `swagger.json` is also possible.\n   */\n  export interface ISwaggerConfig {\n    /**\n     * Output path of the `swagger.json`.\n     *\n     * If you've configured only directory, the file name would be the `swagger.json`.\n     * Otherwise you've configured the full path with file name and extension, the\n     * `swagger.json` file would be renamed to it.\n     */\n    output: string;\n    /**\n     * Whether to beautify JSON content or not.\n     *\n     * If you configure this property to be `true`, the `swagger.json` file would\n     * be beautified with indentation (2 spaces) and line breaks. If you configure\n     * numeric value instead, the indentation would be specified by the number.\n     *\n     * @default false\n     */\n    beautify?: boolean | number;\n    /**\n     * API information.\n     *\n     * If omitted, `package.json` content would be used instead.\n     */\n    info?: Partial<ISwaggerInfo>;\n    /**\n     * List of server addresses.\n     */\n    servers?: ISwaggerServer[];\n    /**\n     * Security schemes.\n     *\n     * When generating `swagger.json` file through `nestia`, if your controllers or\n     * theirs methods have a security key which is not enrolled in here property,\n     * it would be an error.\n     */\n    security?: Record<string, ISwaggerSecurityScheme>;\n    /**\n     * List of tag names with description.\n     *\n     * It is possible to omit this property or skip some tag name even if\n     * the tag name is used in the API routes. In that case, the tag name\n     * would be used without description.\n     *\n     * Of course, if you've written a comment like `@tag {name} {descrition}`,\n     * you can entirely replace this property specification.\n     */\n    tags?: ISwaggerTag[];\n    /**\n     * Decompose query DTO.\n     *\n     * If you configure this property to be `true`, the query DTO would be decomposed\n     * into individual query parameters per each property.\n     *\n     * @default false\n     */\n    decompose?: boolean;\n    operationId?(props: {\n      class: string;\n      function: string;\n      method: \"HEAD\" | \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\";\n      path: string;\n    }): string;\n  }\n}\n/**\n * Security scheme of Swagger Documents.\n *\n * `ISwaggerSecurityScheme` is a data structure representing content of\n * `securitySchemes` in `swagger.json` file. It is composed with 5 types of security\n * schemes as an union type like below.\n *\n * @reference https://swagger.io/specification/#security-scheme-object\n * @author Jeongho Nam - https://github.com/samchon\n */\nexport type ISwaggerSecurityScheme =\n  | ISwaggerSecurityScheme.IHttpBasic\n  | ISwaggerSecurityScheme.IHttpBearer\n  | ISwaggerSecurityScheme.IApiKey\n  | ISwaggerSecurityScheme.IOpenId\n  | ISwaggerSecurityScheme.IOAuth2;\nexport namespace ISwaggerSecurityScheme {\n  export interface IHttpBasic {\n    type: \"http\";\n    scheme: \"basic\";\n  }\n  export interface IHttpBearer {\n    type: \"http\";\n    scheme: \"bearer\";\n    bearerFormat?: string;\n  }\n  export interface IApiKey {\n    type: \"apiKey\";\n    /**\n     * @default header\n     */\n    in?: \"header\" | \"query\" | \"cookie\";\n    /**\n     * @default Authorization\n     */\n    name?: string;\n  }\n  export interface IOpenId {\n    type: \"openIdConnect\";\n    openIdConnectUrl: string;\n  }\n  export interface IOAuth2 {\n    type: \"oauth2\";\n    flows: IOAuth2.IFlowSet;\n    description?: string;\n  }\n  export namespace IOAuth2 {\n    export interface IFlowSet {\n      authorizationCode?: IFlow;\n      implicit?: Omit<IFlow, \"tokenUrl\">;\n      password?: Omit<IFlow, \"authorizationUrl\">;\n      clientCredentials?: Omit<IFlow, \"authorizationUrl\">;\n    }\n    export interface IFlow {\n      authorizationUrl: string;\n      tokenUrl: string;\n      refreshUrl: string;\n      scopes?: Record<string, string>;\n    }\n  }\n}\nMake nestia.config.ts file and run npx nestia swagger command.At first, create nestia.config.ts file through npx nestia init command. It would be placed on the top level directory of your NestJS backend project. For reference, tsconfig.json file also must be placed in the top level directory, too. After creation, configure the nestia.config.ts file referencing above example code and type definition.At least, you've to configure those two properties:\ninput: Accessor of controller classes\nswagger.output: Path of swagger.json file\nWhen you've completed above configuration, just run npx nestia swagger command. Then, swagger.json file would be newly generated, and placed into the $config.swagger.output directory following your nestia.config.ts configuration.By the way, nestia.config.ts supports alternative options specifying the target controller classes instead of using the Module instance. If your backend application server does not have special configuration like setGlobalPrefix, enableVersioning and RouterModule, it is okay to specifying the target controller classes just by writing their file path like below.\nimport { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule);\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  swagger: {\n    output: \"dist/swagger.json\",\n    beautify: true,\n    security: {\n      bearer: {\n        type: \"apiKey\",\n        name: \"Authorization\",\n        in: \"header\",\n      },\n    },\n    servers: [\n      {\n        url: \"http://localhost:3000\",\n        description: \"Local Server\",\n      },\n    ],\n  },\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nimport { NestFactory } from \"@nestjs/core\";\nimport { FastifyAdaptor } from \"@nestjs/platform-fastify\";\nimport { YourModule } from \"./src/YourModule\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: async () => {\n    const app = await NestFactory.create(YourModule, new FastifyAdaptor());\n    // app.setGlobalPrefix(\"api\");\n    // app.enableVersioning({\n    //     type: VersioningType.URI,\n    //     prefix: \"v\",\n    // })\n    return app;\n  },\n  swagger: {\n    output: \"dist/swagger.json\",\n    beautify: true,\n    security: {\n      bearer: {\n        type: \"apiKey\",\n        name: \"Authorization\",\n        in: \"header\",\n      },\n    },\n    servers: [\n      {\n        url: \"http://localhost:3000\",\n        description: \"Local Server\",\n      },\n    ],\n  },\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: [\n    \"src/controllers\", \n    \"src/fake/controllers\", \n    \"src/test/controllers\"\n  ],\n  swagger: {\n    output: \"dist/swagger.json\",\n    beautify: true,\n    security: {\n      bearer: {\n        type: \"apiKey\",\n        name: \"Authorization\",\n        in: \"header\",\n      },\n    },\n    servers: [\n      {\n        url: \"http://localhost:3000\",\n        description: \"Local Server\",\n      },\n    ],\n  },\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: \"src/**/*.controller.ts\",\n  swagger: {\n    output: \"dist/swagger.json\",\n    beautify: true,\n    security: {\n      bearer: {\n        type: \"apiKey\",\n        name: \"Authorization\",\n        in: \"header\",\n      },\n    },\n    servers: [\n      {\n        url: \"http://localhost:3000\",\n        description: \"Local Server\",\n      },\n    ],\n  },\n};\nexport default NESTIA_CONFIG;\nimport { INestiaConfig } from \"@nestia/sdk\";\nconst NESTIA_CONFIG: INestiaConfig = {\n  input: {\n    include: [\"src/controllers\"],\n    exclude: [\"src/**/*.fake.ts\"],\n  },\n  swagger: {\n    output: \"dist/swagger.json\",\n    beautify: true,\n    security: {\n      bearer: {\n        type: \"apiKey\",\n        name: \"Authorization\",\n        in: \"header\",\n      },\n    },\n    servers: [\n      {\n        url: \"http://localhost:3000\",\n        description: \"Local Server\",\n      },\n    ],\n  },\n};\nexport default NESTIA_CONFIG;","special-tags#Special Tags":"","controller-methods#Controller Methods":"Swagger generator @nestia/sdk supports three type of comment tags for controller methods:\nHiding\n@deprecated: mark as deprecated\n@internal: hide, never be shown\n@ignore: hide, never be shown, even in the SDK side\nLabeling\n@summary : short description of endpoint\n@tag {name} {description?}: grouppig with description\n@operationId {value}: manual operation ID\nSecurity\n@security {key}: security scheme key\n@security {key} {...scopes}: +scopes for OAuth2 type\nAt first, @internal and @ignore tags are used to hide the controller method from the Swagger Documents. When you use one of them, the controller method would not be written in the swagger.json file. Otherwise, the @deprecated tag is used to mark the controller method as deprecated. When you use it, Swagger Editor will show the deprecated message about the route method like below.Also, the @summary tag is used to write short description of the endpoint. By the way, the @summary tag can be replaced by writing top sentence ends with . symbol. The other one, @tag {name} {description?} tag is used for only groupping. If you fill the description part, it would be shown in the Swagger-UI.The last one, @security is a tag for security scheme. It specifies target security scheme by writing its key like @security {key}. If target scheme type is OAuth2, and it has configured scopes, you can specify the scopes by writing scopes at the backward like @security {key} read write.For reference, target security schemes must be configured in the nestia.config.ts file. If you use @security tag that is not configured in the nestia.config.ts file, it would be an error. Also, if you've configured @nestia/swagger security decorator like @ApiSecurity, @nestia/sdk also can recognize it too.\nimport { TypedBody, TypedParam, TypedRoute } from \"@nestia/core\";\nimport { Controller } from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport typia, { tags } from \"typia\";\nimport { IBbsArticle } from \"@api/lib/structures/IBbsArticle\";\n@Controller(\"bbs/articles/:section\")\nexport class BbsArticlesController {\n  /**\n   * Would be shown without any mark.\n   *\n   * @param section Section code\n   * @param input Content to store\n   * @returns Newly archived article\n   *\n   * @tag public Some description describing public group...\n   * @summary Public API\n   * @security bearer\n   * @security oauth2 read write\n   */\n  @TypedRoute.Post()\n  public async store(\n    @TypedParam(\"section\") section: string,\n    @TypedBody() input: IBbsArticle.IStore,\n  ): Promise<IBbsArticle> {\n    return {\n      ...typia.random<IBbsArticle>(),\n      ...input,\n      section,\n    };\n  }\n  /**\n   * Deprecated API.\n   *\n   * Would be marked as \"deprecated\".\n   *\n   * For reference, top sentence \"Deprecated API.\" can replace the `@summary` tag.\n   *\n   * @param section Section code\n   * @param id Target article ID\n   * @param input Content to update\n   * @returns Updated content\n   *\n   * @deprecated\n   * @operationId updateArticle\n   * @security basic\n   * @security bearer\n   */\n  @TypedRoute.Put(\":id\")\n  public async update(\n    @TypedParam(\"section\") section: string,\n    @TypedParam(\"id\") id: string & tags.Format<\"uuid\">,\n    @TypedBody() input: IBbsArticle.IStore,\n  ): Promise<IBbsArticle> {\n    return {\n      ...typia.random<IBbsArticle>(),\n      ...input,\n      id,\n      section,\n    };\n  }\n  /**\n   * Would not be shown.\n   *\n   * @internal\n   */\n  @ApiSecurity(\"custom\") // LEGACY DECORATOR ALSO CAN BE USED\n  @TypedRoute.Delete(\":id\")\n  public erase(\n    @TypedParam(\"section\") section: string,\n    @TypedParam(\"id\") id: string & tags.Format<\"uuid\">,\n  ): void {\n    section;\n    id;\n  }\n}\n{\n  \"openapi\": \"3.0.1\",\n  \"servers\": [\n    {\n      \"url\": \"https://github.com/samchon/nestia\",\n      \"description\": \"insert your server url\"\n    }\n  ],\n  \"info\": {\n    \"version\": \"1.0.0\",\n    \"title\": \"test\",\n    \"description\": \"\",\n    \"license\": {\n      \"name\": \"ISC\"\n    }\n  },\n  \"tags\": [\n    {\n      \"name\": \"public\",\n      \"description\": \"Some description describing public group...\"\n    }\n  ],\n  \"paths\": {\n    \"/bbs/articles/{section}\": {\n      \"post\": {\n        \"tags\": [\n          \"public\"\n        ],\n        \"operationId\": \"BbsArticlesController.store\",\n        \"parameters\": [\n          {\n            \"name\": \"section\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Section code\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"Content to store\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IBbsArticle.IStore\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Newly archived article\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IBbsArticle\"\n                }\n              }\n            }\n          }\n        },\n        \"summary\": \"Public API\",\n        \"description\": \"Would be shown without any mark.\",\n        \"security\": [\n          {\n            \"bearer\": []\n          },\n          {\n            \"oauth2\": [\n              \"read\",\n              \"write\"\n            ]\n          }\n        ]\n      }\n    },\n    \"/bbs/articles/{section}/{id}\": {\n      \"put\": {\n        \"deprecated\": true,\n        \"tags\": [],\n        \"operationId\": \"BbsArticlesController.update\",\n        \"parameters\": [\n          {\n            \"name\": \"section\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\"\n            },\n            \"description\": \"Section code\",\n            \"required\": true\n          },\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"Target article ID\",\n            \"required\": true\n          }\n        ],\n        \"requestBody\": {\n          \"description\": \"Content to update\",\n          \"content\": {\n            \"application/json\": {\n              \"schema\": {\n                \"$ref\": \"#/components/schemas/IBbsArticle.IStore\"\n              }\n            }\n          },\n          \"required\": true\n        },\n        \"responses\": {\n          \"201\": {\n            \"description\": \"Updated content\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"$ref\": \"#/components/schemas/IBbsArticle\"\n                }\n              }\n            }\n          }\n        },\n        \"summary\": \"Deprecated API\",\n        \"description\": \"Deprecated API.\\n\\nWould be marked as \\\"deprecated\\\".\\n\\nFor reference, top sentence \\\"Deprecated API.\\\" can replace the `@summary` tag.\",\n        \"security\": [\n          {\n            \"basic\": []\n          },\n          {\n            \"bearer\": []\n          }\n        ]\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"IBbsArticle.IStore\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\": {\n            \"type\": \"string\",\n            \"maxLength\": 50,\n            \"minLength\": 3\n          },\n          \"body\": {\n            \"type\": \"string\"\n          },\n          \"files\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IAttachmentFile\"\n            }\n          }\n        },\n        \"nullable\": false,\n        \"required\": [\n          \"title\",\n          \"body\",\n          \"files\"\n        ]\n      },\n      \"IAttachmentFile\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"name\": {\n            \"type\": \"string\",\n            \"maxLength\": 255,\n            \"minLength\": 1,\n            \"nullable\": true\n          },\n          \"extension\": {\n            \"type\": \"string\",\n            \"maxLength\": 8,\n            \"minLength\": 1,\n            \"nullable\": true\n          },\n          \"url\": {\n            \"type\": \"string\",\n            \"format\": \"url\"\n          }\n        },\n        \"nullable\": false,\n        \"required\": [\n          \"name\",\n          \"extension\",\n          \"url\"\n        ]\n      },\n      \"IBbsArticle\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"string\",\n            \"format\": \"uuid\"\n          },\n          \"section\": {\n            \"type\": \"string\"\n          },\n          \"created_at\": {\n            \"type\": \"string\",\n            \"format\": \"date-time\"\n          },\n          \"title\": {\n            \"type\": \"string\",\n            \"maxLength\": 50,\n            \"minLength\": 3\n          },\n          \"body\": {\n            \"type\": \"string\"\n          },\n          \"files\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"$ref\": \"#/components/schemas/IAttachmentFile\"\n            }\n          }\n        },\n        \"nullable\": false,\n        \"required\": [\n          \"id\",\n          \"section\",\n          \"created_at\",\n          \"title\",\n          \"body\",\n          \"files\"\n        ]\n      }\n    },\n    \"securitySchemes\": {\n      \"basic\": {\n        \"type\": \"http\",\n        \"scheme\": \"basic\"\n      },\n      \"bearer\": {\n        \"type\": \"http\",\n        \"scheme\": \"bearer\"\n      },\n      \"oauth2\": {\n        \"type\": \"oauth2\",\n        \"flows\": {\n          \"implicit\": {\n            \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n            \"refreshUrl\": \"https://example.com/api/oauth/refresh\",\n            \"scopes\": {\n              \"read\": \"read authority\",\n              \"write\": \"write authority\"\n            }\n          }\n        }\n      },\n      \"custom\": {\n        \"type\": \"apiKey\",\n        \"in\": \"header\",\n        \"name\": \"Authorization\"\n      }\n    }\n  }\n}\nimport type { INestiaConfig } from \"@nestia/sdk\";\nexport const NESTIA_CONFIG: INestiaConfig = {\n  input: [\"src/controllers\"],\n  output: \"src/api\",\n  swagger: {\n    output: \"swagger.json\",\n    beautify: true,\n    operationId: (props) => `${props.class}.${props.function}`,\n    security: {\n      //----\n      // YOU CAN CHOOSE ANY SECURITY SCHEMES LIKE\n      //----\n      // @security basic\n      // @security bearer\n      // @security oauth2 read write\n      // @security custom\n      basic: {\n        type: \"http\",\n        scheme: \"basic\",\n      },\n      bearer: {\n        type: \"http\",\n        scheme: \"bearer\",\n      },\n      oauth2: {\n        type: \"oauth2\",\n        flows: {\n          implicit: {\n            authorizationUrl: \"https://example.com/api/oauth/dialog\",\n            refreshUrl: \"https://example.com/api/oauth/refresh\",\n            scopes: {\n              //----\n              // YOU CAN CHOOSE ANY SCOPES\n              //----\n              // (@security oauth2 read write) -> BOTH OF THEM\n              // (@security oauth2 read) -> ONE OF THEM\n              // (@security oauth) -> NOTHING\n              read: \"read authority\",\n              write: \"write authority\",\n            },\n          },\n        },\n      },\n      custom: {\n        type: \"apiKey\",\n        in: \"header\",\n        name: \"Authorization\",\n      },\n    },\n  },\n};\nexport default NESTIA_CONFIG;\n/**\n * Security scheme of Swagger Documents.\n *\n * `ISwaggerSecurityScheme` is a data structure representing content of\n * `securitySchemes` in `swagger.json` file. It is composed with 5 types of security\n * schemes as an union type like below.\n *\n * @reference https://swagger.io/specification/#security-scheme-object\n * @author Jeongho Nam - https://github.com/samchon\n */\nexport type ISwaggerSecurityScheme =\n  | ISwaggerSecurityScheme.IHttpBasic\n  | ISwaggerSecurityScheme.IHttpBearer\n  | ISwaggerSecurityScheme.IApiKey\n  | ISwaggerSecurityScheme.IOpenId\n  | ISwaggerSecurityScheme.IOAuth2;\nexport namespace ISwaggerSecurityScheme {\n  export interface IHttpBasic {\n    type: \"http\";\n    scheme: \"basic\";\n  }\n  export interface IHttpBearer {\n    type: \"http\";\n    scheme: \"bearer\";\n    bearerFormat?: string;\n  }\n  export interface IApiKey {\n    type: \"apiKey\";\n    /**\n     * @default header\n     */\n    in?: \"header\" | \"query\" | \"cookie\";\n    /**\n     * @default Authorization\n     */\n    name?: string;\n  }\n  export interface IOpenId {\n    type: \"openIdConnect\";\n    openIdConnectUrl: string;\n  }\n  export interface IOAuth2 {\n    type: \"oauth2\";\n    flows: IOAuth2.IFlowSet;\n    description?: string;\n  }\n  export namespace IOAuth2 {\n    export interface IFlowSet {\n      authorizationCode?: IFlow;\n      implicit?: Omit<IFlow, \"tokenUrl\">;\n      password?: Omit<IFlow, \"authorizationUrl\">;\n      clientCredentials?: Omit<IFlow, \"authorizationUrl\">;\n    }\n    export interface IFlow {\n      authorizationUrl: string;\n      tokenUrl: string;\n      refreshUrl: string;\n      scopes?: Record<string, string>;\n    }\n  }\n}","dto-properties#DTO Properties":"https://swagger.io/docs/specification/data-models/data-types/You can utilize comments and tags to construct special fields of JSON schema.If you write any comment on a property, it would fill the IJsonSchema.description value. When you utilize Special tags of typia, they would be placed into the proper properties of IJsonSchema. Below is the list of supported type and comment tags in the @nestia/sdk.Also, such type and comment tags of DTO properties can be used to enhance validation logic of @nestia/core library. Especially, @TypedBody.${method}(), @TypedParam(), @TypedRoute() and @TypedQuery() functions can use those tags for additional validation.Let's see how those type and comment tags work with example code.\nnumber\nnumber & Type<{keyword}>\nint32\nuint32\nuint64\nint64\nfloat\ndouble\nnumber & Minimum<{number}>\nnumber & Maximum<{number}>\nnumber & ExclusiveMaximum<{number}>\nnumber & ExclusiveMinimum<{number}>\nnumber & MultipleOf<{number}>\nbigint\nbigint & Type<{keyword}>\nint64\nuint64\nbigint & Minimum<{bigint}>\nbigint & Maximum<{bigint}>\nbigint & ExclusiveMaximum<{bigint}>\nbigint & ExclusiveMinimum<{bigint}>\nbigint & MultipleOf<{bigint}>\nstring\nstring & MinLength<{number}>\nstring & MaxLength<{number}>\nstring & Pattern<{regex}>\nstring & Format<{keyword}>\nemail\nuuid\nipv4\nipv6\nurl\ndate: YYYY-MM-DD\ndate-time: Date.toISOString()\nexport interface SpecialTag {\n  /**\n   * Deprecated tags are just used for marking.\n   *\n   * @title Unsigned integer\n   * @deprecated\n   */\n  type: number & tags.Type<\"uint32\">;\n  /**\n   * Internal tagged property never be shown in JSON schema.\n   *\n   * It even doesn't be shown in other `typia` functions like `assert<T>()`.\n   *\n   * @internal\n   */\n  internal: number[];\n  /**\n   * Hidden tagged property never be shown in JSON schema.\n   *\n   * However, it would be shown in other `typia` functions like `stringify<T>()`.\n   *\n   * @hidden\n   */\n  hidden: boolean;\n  /**\n   * You can limit the range of number.\n   *\n   * Also, you can configure `default` property by comment tag.\n   *\n   * @default 30\n   */\n  number?: number & tags.ExclusiveMinimum<19> & tags.Maximum<100>;\n  /**\n   * You can limit the length of string.\n   */\n  string: string & tags.MinLength<3>;\n  /**\n   * You can limit the pattern of string.\n   */\n  pattern: string & tags.Pattern<\"^[a-z]+$\">;\n  /**\n   * You can limit the format of string.\n   */\n  format: null | (string & tags.Format<\"date-time\">);\n  /**\n   * You also can perform union type in type tags.\n   */\n  ip: string & (tags.Format<\"ipv4\"> | tags.Format<\"ipv6\">);\n  /**\n   * In the Array case, only type tags can limit elements' type.\n   */\n  array: Array<string & tags.Format<\"uuid\">> &\n    tags.MinItems<3> &\n    tags.MaxItems<100>;\n}\n{\n  \"SpecialTag\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"type\": {\n        \"deprecated\": true,\n        \"title\": \"Unsigned integer\",\n        \"description\": \"Deprecated tags are just used for marking.\",\n        \"type\": \"integer\"\n      },\n      \"number\": {\n        \"description\": \"You can limit the range of number.\\n\\nAlso, you can configure `default` property by comment tag.\",\n        \"type\": \"number\",\n        \"minimum\": 19,\n        \"exclusiveMinimum\": true,\n        \"maximum\": 100,\n        \"default\": 30\n      },\n      \"string\": {\n        \"description\": \"You can limit the length of string.\",\n        \"type\": \"string\",\n        \"minLength\": 3\n      },\n      \"pattern\": {\n        \"description\": \"You can limit the pattern of string.\",\n        \"type\": \"string\",\n        \"pattern\": \"^[a-z]+$\"\n      },\n      \"format\": {\n        \"description\": \"You can limit the format of string.\",\n        \"type\": \"string\",\n        \"format\": \"date-time\",\n        \"nullable\": true\n      },\n      \"ip\": {\n        \"oneOf\": [\n          {\n            \"description\": \"You also can perform union type in type tags.\",\n            \"type\": \"string\",\n            \"format\": \"ipv4\"\n          },\n          {\n            \"description\": \"You also can perform union type in type tags.\",\n            \"type\": \"string\",\n            \"format\": \"ipv6\"\n          }\n        ],\n        \"description\": \"You also can perform union type in type tags.\"\n      },\n      \"array\": {\n        \"description\": \"In the Array case, only type tags can limit elements' type.\",\n        \"type\": \"array\",\n        \"items\": {\n          \"description\": \"In the Array case, only type tags can limit elements' type.\",\n          \"type\": \"string\",\n          \"format\": \"uuid\"\n        },\n        \"maxItems\": 100,\n        \"minItems\": 3\n      }\n    },\n    \"nullable\": false,\n    \"required\": [\n      \"type\",\n      \"string\",\n      \"pattern\",\n      \"format\",\n      \"ip\",\n      \"array\"\n    ]\n  }\n}\n/**\n * Security schema of Swagger Documents.\n *\n * `ISwaggerSecurityScheme` is a data structure representing content of\n * `securitySchemes` in `swagger.json` file. It is composed with 5 types of security\n * schemes as an union type like below.\n *\n * @reference https://swagger.io/specification/#security-scheme-object\n * @author Jeongho Nam - https://github.com/samchon\n */\nexport type ISwaggerSecurityScheme =\n  | ISwaggerSecurityScheme.IHttpBasic\n  | ISwaggerSecurityScheme.IHttpBearer\n  | ISwaggerSecurityScheme.IApiKey\n  | ISwaggerSecurityScheme.IOpenId\n  | ISwaggerSecurityScheme.IOAuth2;\nexport namespace ISwaggerSecurityScheme {\n  export interface IHttpBasic {\n    type: \"http\";\n    scheme: \"basic\";\n  }\n  export interface IHttpBearer {\n    type: \"http\";\n    scheme: \"bearer\";\n    bearerFormat?: string;\n  }\n  export interface IApiKey {\n    type: \"apiKey\";\n    /**\n     * @default header\n     */\n    in?: \"header\" | \"query\" | \"cookie\";\n    /**\n     * @default Authorization\n     */\n    name?: string;\n  }\n  export interface IOpenId {\n    type: \"openIdConnect\";\n    openIdConnectUrl: string;\n  }\n  export interface IOAuth2 {\n    type: \"oauth2\";\n    flows: IOAuth2.IFlowSet;\n    description?: string;\n  }\n  export namespace IOAuth2 {\n    export interface IFlowSet {\n      authorizationCode?: IFlow;\n      implicit?: Omit<IFlow, \"tokenUrl\">;\n      password?: Omit<IFlow, \"authorizationUrl\">;\n      clientCredentials?: Omit<IFlow, \"authorizationUrl\">;\n    }\n    export interface IFlow {\n      authorizationUrl: string;\n      tokenUrl: string;\n      refreshUrl: string;\n      scopes?: Record<string, string>;\n    }\n  }\n}","customization#Customization":"Typia > JSON schema > CustomizationIf what you want is not just filling special properties of JSON schema spec, but to adding custom properties into the JSON schema definition, you can accomlish it with typia feature. Define a type based on typia.tags.TagBase, and specify the schema property type as you want.For reference, the custom property must be started with x- prefix. It's a rule of JSON schema.\nimport typia, { tags } from \"typia\";\n \ntype Monetary<Value extends string> = tags.TagBase<{\n  target: \"number\";\n  kind: \"monetary\";\n  value: Value;\n  schema: {\n    \"x-monetary\": Value;\n  };\n}>;\ntype Placeholder<Value extends string> = tags.TagBase<{\n  target: \"boolean\" | \"number\" | \"string\";\n  kind: \"placeholder\";\n  value: Value;\n  schema: {\n    \"x-placeholder\": Value;\n  };\n}>;\ninterface IAccount {\n  code: string & Placeholder<\"Write you account code please\">;\n  balance: number & Monetary<\"dollar\">;\n};\n \ntypia.json.application<[IAccount]>();\n({\n  schemas: [\n    {\n      $ref: \"#/components/schemas/IAccount\",\n    },\n  ],\n  components: {\n    schemas: {\n      IAccount: {\n        type: \"object\",\n        properties: {\n          code: {\n            type: \"string\",\n            \"x-placeholder\": \"Write you account code please\",\n          },\n          balance: {\n            type: \"number\",\n            \"x-monetary\": \"dollar\",\n          },\n        },\n        nullable: false,\n        required: [\"code\", \"balance\"],\n      },\n    },\n  },\n  purpose: \"swagger\",\n  surplus: false,\n});\nOtherwise you wanna customize the swagger data, utilize the @SwaggerCustomizer() decorator.As you can see from the above example code, callback function defined in the @SwaggerCustomizer() decorator is changing the swagger data, because it is called when the npx nestia swagger command being executed. Furthermore, it is possible to add plugin property starting with x- characters.In other words, the @SwaggerCustomizer() does not affect the runtime behavior of the backend server, but only affects the swagger.json file.\nexport function SwaggerCustomizer(\n  closure: (props: SwaggerCustomizer.IProps) => unknown,\n): MethodDecorator;\nexport namespace SwaggerCustomizer {\n  export interface IProps {\n    swagger: ISwagger;\n    method: string;\n    path: string;\n    route: ISwaggerRoute;\n    at(func: Function): ISwaggerEndpoint | undefined;\n    get(accessor: IAccessor): ISwaggerRoute | undefined;\n  }\n  export interface IAccessor {\n    path: string;\n    method: string;\n  }\n  export interface ISwaggerEndpoint extends IAccessor {\n    route: ISwaggerRoute;\n  }\n}\nimport { SwaggerCustomizer, TypedParam, TypedRoute } from \"@nestia/core\";\nimport { Controller } from \"@nestjs/common\";\nimport { tags } from \"typia\";\n@Controller(\"custom\")\nexport class CustomController {\n  @SwaggerCustomizer((props: SwaggerCustomizer.IProps) => {\n    props.swagger.openapi = \"3.0.11\";\n    props.route.description = \"This is a custom description\";\n    (props.route as any)[\"x-special-symbol\"] = \"Something Special\";\n    const neighbor = props.at(CustomController.prototype.normal);\n    if (neighbor) {\n      neighbor.description = \"That is the normal description\";\n      (neighbor.route as any)[\"x-special-symbol\"] = \"Something Normal\";\n    }\n  })\n  @TypedRoute.Get(\":key/customize\")\n  public customize(@TypedParam(\"key\") key: number): string {\n    return key.toString();\n  }\n  @TypedRoute.Get(\":id/normal\")\n  public normal(@TypedParam(\"id\") id: string & tags.Format<\"uuid\">): string {\n    return id.toString();\n  }\n}\n{\n  \"openapi\": \"3.0.11\",\n  \"servers\": [\n    {\n      \"url\": \"https://github.com/samchon/nestia\",\n      \"description\": \"insert your server url\"\n    }\n  ],\n  \"info\": {\n    \"version\": \"2.5.9-dev.20240223\",\n    \"title\": \"@nestia/test\",\n    \"description\": \"Test program of Nestia\",\n    \"license\": {\n      \"name\": \"MIT\"\n    }\n  },\n  \"paths\": {\n    \"/custom/{key}/customize\": {\n      \"get\": {\n        \"tags\": [],\n        \"parameters\": [\n          {\n            \"name\": \"key\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"number\"\n            },\n            \"description\": \"\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        },\n        \"description\": \"This is a custom description\",\n        \"x-special-symbol\": \"Something Special\"\n      }\n    },\n    \"/custom/{id}/normal\": {\n      \"get\": {\n        \"tags\": [],\n        \"parameters\": [\n          {\n            \"name\": \"id\",\n            \"in\": \"path\",\n            \"schema\": {\n              \"type\": \"string\",\n              \"format\": \"uuid\"\n            },\n            \"description\": \"\",\n            \"required\": true\n          }\n        ],\n        \"responses\": {\n          \"200\": {\n            \"description\": \"\",\n            \"content\": {\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"string\"\n                }\n              }\n            }\n          }\n        },\n        \"description\": \"That is the normal description\",\n        \"x-special-symbol\": \"Something Normal\"\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {},\n    \"securitySchemes\": {\n      \"bearer\": {\n        \"type\": \"apiKey\",\n        \"in\": \"header\",\n        \"name\": \"Authorization\"\n      }\n    }\n  }\n}","distribution#Distribution":"You can choose two options for swagger.json file distribution.The 1st is publishing the swagger.json file in a public repo, and showing it through Swagger Editor like below:\nsamchon/bbs-backend: Swagger Editor\nsamchon/fake-iamport-server: Swagger Editor\nsamchon/fake-toss-payments-server: Swagger Editor\nThe 2nd way is to hosting the swagger.json file in the NestJS backend server.Read below example code, and follow it on yours:\nimport { NestFactory } from \"@nestjs/core\";\nimport { SwaggerModule } from \"@nestjs/swagger\";\nimport fs from \"fs\";\nasync function open(): Promise<void> {\n  const app = await NestFactory.create({...});\n  const docs = require(\"...write swagger.json path\");\n  docs.servers = [{ url: \"write your server URL\" }];\n  SwaggerModule.setup(\"swagger\", app, docs);\n  await app.listen(8080);\n}"}},"/docs/setup":{"title":"Setup","data":{"boilerplate#Boilerplate":"npx nestia start <directory>\nJust run above npx nestia start <directory> command.Boilerplate would be automatically constructed in the <directory>. For reference, this is a minimal boilerplate project concentrating only on the SDK generation from the NestJS server. It does not contain the database connection.If you want to construct much detailed boilerplate project, visit @samchon/backend or run below command. Below boilerplate project is using Prisma ORM and PostgresSQL database. Also, it guides how to utilize FP (Functional Programming) and TDD (Test Driven Development) in the NestJS backend development.\nnpx nestia template <directory>","setup-wizard#Setup Wizard":"npx nestia setup\nnpx nestia setup --manager pnpm\nYarn berry is not supported.\nnpx nestia setup --manager yarn\nWhen you want to setup nestia in existing project, just run above npx nestia setup command.Setup Wizard will install and configure everything automatically.","webpack#Webpack":"","with-node_modules#With node_modules":"# SETUP NESTIA\nnpx nestia setup\n# INSTALL TS-LOADER & WEBPACK\nnpm install --save-dev ts-loader\nnpm install --save-dev webpack webpack-cli webpack-node-externals \n# SETUP NESTIA\nnpx nestia setup --manager pnpm\n# INSTALL TS-LOADER & WEBPACK\npnpm install --save-dev ts-loader\npnpm install --save-dev webpack webpack-cli webpack-node-externals \nYarn berry is not supported.\n# SETUP NESTIA\nnpx nestia setup --manager yarn\n# INSTALL TS-LOADER & WEBPACK\nyarn add -D ts-loader\nyarn add -D webpack webpack-cli webpack-node-externals \nWhen you want to bundle your NestJS project into a single file, you have to install webpack manually.Never run nest build --webpack command of @nestjs/cli, because it is not compatible with nestia.\nconst path = require(\"path\");\nconst nodeExternals = require(\"webpack-node-externals\");\nmodule.exports = {\n  // CUSTOMIZE HERE\n  entry: {\n    server: \"./src/executable/server.ts\",\n  },\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"[name].js\",\n  },\n  optimization: {\n    minimize: false,\n  },\n  // JUST KEEP THEM\n  externals: [nodeExternals()],\n  mode: \"development\",\n  target: \"node\",\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        exclude: /node_modules/,\n        loader: \"ts-loader\",\n      },\n    ],\n  },\n  resolve: {\n    extensions: [\".tsx\", \".ts\", \".js\"],\n  },\n};\nAfter installing both nestia and webpack, configure webpack.config.js file like above.From now on, you can build the single JS file just by running the npx webpack command. By the way, when removing devDependencies for --production install, never forget to add the --ignore-scripts option to prevent the prepare script.\nnpx webpack\nnpm ci --omit=dev --ignore-scripts\npnpm webpack\npnpm install --production --ignore-scripts\nyarn webpack\nrm -rf node_modules\nyarn install --production --ignore-scripts --immutable","single-js-file-only#Single JS file only":"If you can build your NestJS project into a singile JS file, and that JS file even does not require the node_modules directory, it would be useful for building a serverless environment. Also, as it does not need to perform the pruning process (represented by pnpm install --production --ignore-scripts command), it would be much convenient and faster than the above method.To accomplish the light JS bundling, install special dependencies like below.\n# SETUP NESTIA\nnpx nestia setup\n# INSTALL SPECIAL DEPENDENCIES\nnpm install --save-dev ts-loader\nnpm install --save-dev webpack webpack-cli\nnpm install --save-dev copy-webpack-plugin write-file-webpack-plugin\n# SETUP NESTIA\nnpx nestia setup --manager pnpm\n# INSTALL SPECIAL DEPENDENCIES\npnpm install --save-dev ts-loader\npnpm install --save-dev webpack webpack-cli\npnpm install --save-dev copy-webpack-plugin write-file-webpack-plugin\nYarn berry is not supported.\n# SETUP NESTIA\nnpx nestia setup --manager yarn\n# INSTALL SPECIAL DEPENDENCIES\nyarn add -D ts-loader\nyarn add -D webpack webpack-cli\nyarn add -D copy-webpack-plugin write-file-webpack-plugin\nAlso, configure webpack.config.js file like below, considering options.For example, if your NestJS backend server is utilizing the Prisma ORM, uncomment the CopyWebpackPlugin.patterns block to copy the Prisma engine files (node_modules/**/.prisma/client/*.node) into the output dist directory.After that, just run npx webpack command. Then the light JS file(s) would be bundled into the dist directory, and you don't need to perform the pruning process (represented by pnpm install --production --ignore-scripts command) for the distribution. Just deploy the dist directory to the target server.\nconst path = require(\"path\");\nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\");\nconst WriteFilePlugin = require(\"write-file-webpack-plugin\");\nconst { IgnorePlugin } = require(\"webpack\");\nconst lazyImports = [\n  \"@fastify/static\",\n  \"@fastify/view\",\n  \"@nestjs/microservices\",\n  \"@nestjs/websockets\",\n  \"class-transformer\",\n  \"class-validator\",\n];\n// @reference https://tech-blog.s-yoshiki.com/entry/297\nmodule.exports = {\n  // CUSTOMIZE HERE\n  entry: {\n    server: \"./src/executable/server.ts\",\n  },\n  output: {\n    path: path.join(__dirname, \"dist\"),\n    filename: \"[name].js\",\n    chunkFormat: false,\n  },\n  optimization: {\n    minimize: true,\n  },\n  // JUST KEEP THEM\n  mode: \"production\",\n  target: \"node\",\n  module: {\n    rules: [\n      {\n        test: /\\.ts$/,\n        exclude: /node_modules/,\n        loader: \"ts-loader\",\n      },\n    ],\n  },\n  resolve: {\n    extensions: [\".tsx\", \".ts\", \".js\"],\n  },\n  plugins: [\n    new CopyWebpackPlugin({\n      patterns: [\n        {\n          from: \".env\",\n          to: \"[name][ext]\",\n        },\n        {\n          from: \"package.json\",\n          to: \"[name][ext]\",\n        },\n        // {\n        //   from: \"node_modules/**/.prisma/client/*.node\",\n        //   to: () => Promise.resolve(\"[path][name][ext]\"),\n        //   globOptions: {\n        //     dot: true,\n        // },\n      ],\n    }),\n    new WriteFilePlugin(),\n    new IgnorePlugin({\n      checkResource: (resource) => {\n        if (lazyImports.some((modulo) => resource.startsWith(modulo))) {\n          try {\n            require.resolve(resource);\n          } catch (err) {\n            return true;\n          }\n        }\n        return false;\n      },\n    }),\n  ],\n};","nx#NX":"npx nestia setup\nnpx nestia setup --manager pnpm\nnpx nestia setup --manager yarn\nAfter install nestia like above, you have to modify project.json on each app you use typia like below.\n \"targets\": {\n    \"build\": {\n      ...\n      \"options\": {\n        ...\n        \"target\": \"node\",\n        \"compiler\": \"tsc\",\n        \"transformers\": [\n          \"typia/lib/transform\",\n          {\n            \"name\": \"@nestia/core/lib/transform\",\n            \"options\": {\n              \"validate\": \"assert\",\n              \"stringify\": \"assert\"\n            }\n          }\n        ]\n      }\n    },\n    ...\n }","manual-setup#Manual Setup":"# COMPILERS\nnpm install --save-dev typescript\nnpm install --save-dev ts-node\nnpm install --save-dev ts-patch\n# NESTIA\nnpm install --save-dev nestia\nnpm install --save-dev @nestia/sdk\nnpm install --save @nestia/core\nnpm install --save @nestia/e2e\nnpm install --save typia\n# COMPILERS\npnpm install --save-dev typescript\npnpm install --save-dev ts-node\npnpm install --save-dev ts-patch\n# NESTIA\npnpm install --save-dev nestia\npnpm install --save-dev @nestia/sdk\npnpm install --save @nestia/core\npnpm install --save @nestia/e2e\npnpm install --save typia\n# COMPILERS\nyarn add -D typescript\nyarn add -D ts-node\nyarn add -D ts-patch\n# NESTIA\nyarn add -D nestia\nyarn add -D @nestia/sdk\nyarn add @nestia/core\nyarn add @nestia/e2e\nyarn add typia\nIf you want to install nestia manually, you have to install ts-node and ts-patch modules as well as typescript. After installing those compilers, install nestia libraries like above.\n{\n  \"strict\": true,\n  \"strictNullChecks\": true,\n  \"compilerOptions\": {\n    \"plugins\": [\n      { \"transform\": \"typia/lib/transform\" },\n      { \n        \"transform\": \"@nestia/core/lib/transform\",\n        \"validate\": \"assert\",\n        \"stringify\": \"assert\", \n      },\n    ],\n  },\n}\nAfter that, configure tsconfig.json file like above.As @nestia/core and typia are generating optimal validation and JSON serialization code through transformation, you've to configure them as plugins. For reference, you can choose which typia functions to be used in validation and JSON serialization.\nConfigurable values both on validate and stringify\nis: check validation only, and do not reveal the reason why\nassert: find the 1st type error with reason\nvalidate: find every type errors with detailed reasons\nOnly for validate\nequals: do not allow extra properties\nassertEquals\nvalidateEquals\nassertPrune or validatePrune: prune extra properties with type checking\nassertClone or validateClone: deep clone with type checking for faster pruning\nAlso, never forget to configure strict (or strictNullChecks) as true. It is essential option for modern TypeScript development.\n{\n  \"scripts\": {\n    \"prepare\": \"ts-patch install && typia patch\"\n  }\n}\nnpm run prepare\npnpm run prepare\nyarn run prepare\nAt last, configure npm run prepare command like above.Of course, you've to run the npm run prepare command after configuration.For reference, ts-patch is an helper library of TypeScript compiler that supporting custom transformations by plugins. With the ts-patch setup and plugin configurations, whenever you run tsc command, your @nestia/core decorator function call statements would be transformed to the optimal operation codes in the compiled JavaScript files.\nnpx typia patch\nSince TypeScript v5.3 update, tsc no more parses JSDocComments. Therefore, (@nestia/core) typia also cannot utilize those JSDocComment related features too, especially \"Comment Tags\" and \"JSON schema generator\".The npx typia patch command has been developed to revive the JSDocComment parsing feature of tsc. It is temporary solution for the TypeScript v5.3 update instead of ts-patch, and will be disabled after ts-patch starts supporting such TypeScript v5.3 update.Of course, if you don't use any \"Comment Tags\" and \"JSON schema generator\", you don't need to run npx typia patch command. This is not mandatory command, but just optional command.","standard-typescript-only#Standard TypeScript Only":"If you're using @nestia/core module, you've to use only standard TypeScript compiler.Do you remember? @nestia/core boosts up runtime validation and JSON serialization through AOT compilation. By the way, @nestia/core performs the AOT compilation through standard TypeScript compiler API. Therefore, if you want to utilize those superfast decorators of @nestia/core module, you have to use only standard TypeScript compiler.I also know that non-standard compilers are faster than standard. However, all of them are erasing type information, and skipping type checking for rapid compilation. By the way, without type information, @nestia/core can't do anything. It is the reason why @nestia/core does not support them.\nStandard TypeScript Compiler (keep type info)\nMicrosoft/TypeScript\nNon-standard TypeScript Compilers (erase type info)\nSWC\nESBuild\nBabel\nSWC author is preparing a new project STC, and it does not erase type info.Therefore, nestia will support it."}}}